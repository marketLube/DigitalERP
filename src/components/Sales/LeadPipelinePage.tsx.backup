import React, { useState, useMemo, useEffect, useRef, useCallback } from 'react';
import { 
  Search, 
  Plus, 
  ChevronDown, 
  X, 
  Edit3, 
  Trash2, 
  Calendar, 
  List, 
  LayoutGrid,
  Target,
  FileText,
  BarChart3,
  Settings,
  Users,
  Settings2,
  UserCheck,
  Crown,
  Shield,
  UserPlus,
  TrendingUp,
  Key,
  ArrowUp,
  ArrowDown,
  GripVertical,
  Eye,
  EyeOff,
  Filter,
  User,
  MoreHorizontal,
  Mail,
  Phone,
  MessageCircle,
  ChevronLeft,
  ChevronRight,
  Save,
  Building,
  DollarSign,
  Palette,
  Minus
} from 'lucide-react';
import ProposalsPage from './ProposalsPage';
import DateRangePicker, { DateRange } from '../Common/DateRangePicker';

interface Lead {
  id: string;
  title: string;
  description: string;
  contactPerson: string;
  company: string;
  email: string;
  phone: string;
  value: number;
  currency: string;
  source: string;
  assignee: string;
  assignees?: string[]; // Support for multiple assignees
  teamId?: string; // Team assignment
  createdDate: string;
  followUpDate: string;
  lastContactDate: string;
  mainStatus: string;
  subStatus: string;
  priority: 'Hot' | 'Warm' | 'Cold';
  tags: string[];
  notes: string;
  probability: number;
  expectedCloseDate: string;
  lastActivity: string;
}

interface StatusConfig {
  id: string;
  name: string;
  color: string;
  order: number;
  subStatuses: SubStatus[];
  excludedTeams?: string[]; // Team IDs that cannot see this status
  excludedUsers?: string[]; // User IDs that cannot see this status
}

interface SubStatus {
  id: string;
  name: string;
  color: string;
  order: number;
  excludedTeams?: string[]; // Team IDs that cannot see this sub-status
  excludedUsers?: string[]; // User IDs that cannot see this sub-status
}

interface LeadCardProps {
  lead: Lead;
  onEdit: (lead: Lead) => void;
  onDelete: (leadId: string) => void;
  onStatusChange: (leadId: string, newStatus: string) => void;
  compact?: boolean;
  cardMode?: 'colorful' | 'minimal';
}

interface LeadModalProps {
  isOpen: boolean;
  lead: Lead | null;
  onClose: () => void;
  onSave: (lead: Lead) => void;
  onDelete: (leadId: string) => void;
  teams: Team[];
  statusConfig: StatusConfig[];
  users: SalesUser[];
}

// StatusManagementProps interface removed - using inline editor

interface CalendarEvent {
  date: string;
  leads: Lead[];
  count: number;
}

interface LeadPipelinePageProps {
  defaultTab?: 'pipeline' | 'proposals' | 'analytics' | 'settings';
}

interface Team {
  id: string;
  name: string;
  description: string;
  color: string;
  members: TeamMember[];
  createdDate: string;
  status: 'Active' | 'Inactive';
}

interface TeamMember {
  id: string;
  name: string;
  email: string;
  role: 'Lead' | 'Member' | 'Manager';
  avatar?: string;
  joinDate: string;
}

interface SalesUser {
  id: string;
  name: string;
  email: string;
  role: 'Admin' | 'Manager' | 'Agent' | 'Viewer';
  department: string;
  teams: string[];
  permissions: UserPermission[];
  status: 'Active' | 'Inactive';
  joinDate: string;
  lastActive: string;
  avatar?: string;
}

interface UserPermission {
  id: string;
  name: string;
  description: string;
  granted: boolean;
}

// Lead Card Component
const LeadCard: React.FC<LeadCardProps> = ({ lead, onEdit, onDelete, onStatusChange, compact = false, cardMode = 'colorful' }) => {
  const [showDropdown, setShowDropdown] = useState(false);

  const getPriorityBackground = (priority: string) => {
    if (cardMode === 'minimal') {
      return 'bg-white border-l-4 ' + getPriorityBorderColor(priority);
    }
    switch (priority.toLowerCase()) {
      case 'hot': return 'bg-gradient-to-br from-red-50 to-red-100';
      case 'warm': return 'bg-gradient-to-br from-orange-50 to-orange-100';
      case 'cold': return 'bg-gradient-to-br from-blue-50 to-blue-100';
      default: return 'bg-gradient-to-br from-gray-50 to-gray-100';
    }
  };

  const getPriorityBorderColor = (priority: string) => {
    switch (priority.toLowerCase()) {
      case 'hot': return 'border-l-red-500';
      case 'warm': return 'border-l-orange-500';
      case 'cold': return 'border-l-blue-500';
      default: return 'border-l-gray-500';
    }
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: lead.currency || 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(value);
  };

  const isOverdue = (followUpDate: string) => {
    return new Date(followUpDate) < new Date() && followUpDate !== '';
  };

  // Get initials from name (first name + last name)
  const getInitials = (name: string) => {
    const names = name.trim().split(' ');
    if (names.length >= 2) {
      return names[0].charAt(0) + names[names.length - 1].charAt(0);
    }
    return name.substring(0, 2);
  };

  // Generate color for assignee based on name
  const getAssigneeColor = (name: string) => {
    const colors = [
      'bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-pink-500', 
      'bg-indigo-500', 'bg-yellow-500', 'bg-red-500', 'bg-teal-500',
      'bg-orange-500', 'bg-cyan-500', 'bg-lime-500', 'bg-violet-500'
    ];
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
      hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    return colors[Math.abs(hash) % colors.length];
  };

  // Get all assignees (support both single assignee and multiple assignees)
  const getAllAssignees = () => {
    if (lead.assignees && lead.assignees.length > 0) {
      return lead.assignees;
    }
    return lead.assignee ? [lead.assignee] : [];
  };

  const handleEmailClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    window.location.href = `mailto:${lead.email}`;
  };

  const handleWhatsAppClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    const phoneNumber = lead.phone.replace(/\D/g, ''); // Remove non-digits
    window.open(`https://wa.me/${phoneNumber}`, '_blank');
  };

  return (
    <div 
      className={`border border-gray-200 rounded-xl p-3 hover:shadow-lg transition-all duration-200 cursor-pointer group ${getPriorityBackground(lead.priority)} min-h-[155px] max-h-[155px] flex flex-col w-full max-w-full overflow-hidden`}
      onClick={() => onEdit(lead)}
    >
      <div className="flex items-start justify-between mb-2">
        <div className="flex-1 min-w-0">
          <h4 className="font-poppins font-semibold text-gray-900 text-sm truncate pr-2 leading-tight">
            {lead.title}
          </h4>
          <div className="flex items-center gap-1 text-xs text-gray-600 font-poppins mt-1 truncate" title={`${lead.contactPerson} at ${lead.company}`}>
            <User size={10} className="flex-shrink-0" />
            <span className="truncate">{lead.contactPerson}</span>
            <span className="text-gray-400">â€¢</span>
            <span className="truncate">{lead.company}</span>
          </div>
        </div>
        
        <div className="relative flex-shrink-0">
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowDropdown(!showDropdown);
            }}
            className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 hover:bg-white/50 rounded-full"
          >
            <MoreHorizontal size={12} className="text-gray-500" />
          </button>
          
          {showDropdown && (
            <div className="absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-32">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onEdit(lead);
                  setShowDropdown(false);
                }}
                className="w-full px-3 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2 font-poppins"
              >
                <Edit3 size={11} />
                Edit
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onDelete(lead.id);
                  setShowDropdown(false);
                }}
                className="w-full px-3 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center gap-2 font-poppins"
              >
                <Trash2 size={11} />
                Delete
              </button>
            </div>
          )}
        </div>
          </div>

      <div className="flex-1 space-y-1.5">
        <div className="flex items-center justify-between">
          <span className="text-sm font-poppins font-semibold text-gray-900">
            {formatCurrency(lead.value)}
          </span>
          {cardMode === 'colorful' && (
            <span className={`px-2 py-0.5 rounded-full text-xs font-poppins font-medium ${
              lead.priority === 'Hot' ? 'bg-red-200 text-red-800' :
              lead.priority === 'Warm' ? 'bg-orange-200 text-orange-800' :
              'bg-blue-200 text-blue-800'
            }`}>
              {lead.priority}
            </span>
          )}
          </div>

        <div className="flex items-center gap-1 text-xs text-gray-600 font-poppins">
          <Calendar size={10} className="flex-shrink-0" />
          <span className={`truncate ${isOverdue(lead.followUpDate) ? 'text-red-600 font-semibold' : ''}`}>
            {lead.followUpDate ? new Date(lead.followUpDate).toLocaleDateString() : 'No follow-up'}
          </span>
          </div>

        {/* Probability Progress Bar - Single Line */}
        <div className="flex items-center gap-2 text-xs text-gray-600 font-poppins">
          <Target size={10} className="flex-shrink-0" />
          <span className="flex-shrink-0">Probability:</span>
          <div className="flex-1 bg-gray-200 rounded-full h-1.5 min-w-0">
            <div 
              className={`h-1.5 rounded-full transition-all duration-300 ${
                lead.probability >= 70 ? 'bg-green-500' :
                lead.probability >= 40 ? 'bg-yellow-500' : 'bg-red-500'
              }`}
              style={{ width: `${lead.probability}%` }}
            ></div>
          </div>
          <span className="font-medium flex-shrink-0">{lead.probability}%</span>
        </div>
          </div>

      <div className="flex items-center justify-between pt-1.5 border-t border-white/50 w-full overflow-hidden">
        <div className="flex items-center gap-1 flex-shrink-0">
          <button
            onClick={handleEmailClick}
            className="text-gray-400 hover:text-blue-600 transition-colors duration-200 p-0.5 hover:bg-white/50 rounded flex-shrink-0"
          >
            <Mail size={11} />
          </button>
          <button
            onClick={handleWhatsAppClick}
            className="text-gray-400 hover:text-green-600 transition-colors duration-200 p-0.5 hover:bg-white/50 rounded flex-shrink-0"
          >
            <MessageCircle size={11} />
          </button>
          </div>

        <div className="flex items-center gap-0.5 flex-shrink-0 max-w-[60px] overflow-hidden">
          {getAllAssignees().slice(0, 2).map((assignee, index) => (
            <div
              key={index}
              className={`w-4 h-4 ${getAssigneeColor(assignee)} rounded-full flex items-center justify-center text-white flex-shrink-0`}
              title={assignee}
            >
              <span className="text-[8px] font-poppins font-medium">
                {getInitials(assignee)}
              </span>
          </div>
          ))}
          {getAllAssignees().length > 2 && (
            <div className="w-4 h-4 bg-gray-400 rounded-full flex items-center justify-center text-white flex-shrink-0">
              <span className="text-[8px] font-poppins font-medium">
                +{getAllAssignees().length - 2}
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Calendar Component for Follow-up Tracking
// Calendar Day Modal Component
interface CalendarDayModalProps {
  isOpen: boolean;
  date: Date | null;
  leads: Lead[];
  onClose: () => void;
  onEditLead: (lead: Lead) => void;
}

const CalendarDayModal: React.FC<CalendarDayModalProps> = ({ isOpen, date, leads, onClose, onEditLead }) => {
  if (!isOpen || !date) return null;

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const isOverdue = (followUpDate: string) => {
    const today = new Date();
    const dueDate = new Date(followUpDate);
    return dueDate < today;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-poppins font-semibold text-gray-900">
              Follow-ups for {formatDate(date)}
            </h2>
            <p className="text-sm text-gray-500 mt-1">
              {leads.length} lead{leads.length !== 1 ? 's' : ''} scheduled
            </p>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200"
          >
            <X size={20} className="text-gray-500" />
          </button>
          </div>

        {/* Leads List */}
        <div className="p-6 overflow-y-auto max-h-96">
          <div className="space-y-4">
            {leads.map(lead => (
              <div
                key={lead.id}
                onClick={() => onEditLead(lead)}
                className={`p-4 border rounded-lg cursor-pointer transition-all duration-200 hover:shadow-md ${
                  isOverdue(lead.followUpDate) 
                    ? 'border-red-200 bg-red-50 hover:bg-red-100' 
                    : 'border-gray-200 bg-white hover:bg-gray-50'
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="font-poppins font-semibold text-gray-900">{lead.title}</h3>
                      {isOverdue(lead.followUpDate) && (
                        <span className="px-2 py-1 bg-red-100 text-red-600 text-xs font-poppins font-medium rounded-full">
                          Overdue
                        </span>
                      )}
          </div>
                    <div className="space-y-1">
                      <p className="text-sm font-poppins text-gray-600">
                        <span className="font-medium">{lead.contactPerson}</span> â€¢ {lead.company}
                      </p>
                      <p className="text-sm font-poppins text-gray-500">{lead.email}</p>
                      <div className="flex items-center gap-4 mt-2">
                        <span className="inline-flex px-2 py-1 text-xs font-poppins font-medium rounded-full bg-blue-100 text-blue-800">
                          {lead.mainStatus}
                        </span>
                        <span className={`inline-flex px-2 py-1 text-xs font-poppins font-medium rounded-full ${
                          lead.priority === 'Hot' ? 'bg-red-100 text-red-800' :
                          lead.priority === 'Warm' ? 'bg-orange-100 text-orange-800' :
                          'bg-blue-100 text-blue-800'
                        }`}>
                          {lead.priority}
                        </span>
                        <span className="text-sm font-poppins font-semibold text-gray-900">
                          ${lead.value?.toLocaleString()}
                        </span>
        </div>
        </div>
        </div>
                  <ChevronRight size={16} className="text-gray-400 mt-1" />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const CalendarView: React.FC<{ leads: Lead[], onEditLead: (lead: Lead) => void }> = ({ leads, onEditLead }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [hoveredDate, setHoveredDate] = useState<string | null>(null);
  const [tooltip, setTooltip] = useState<{ x: number; y: number; leads: Lead[] } | null>(null);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [showDayModal, setShowDayModal] = useState(false);

  const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
  const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
  const startDate = new Date(startOfMonth);
  startDate.setDate(startDate.getDate() - startOfMonth.getDay());

  const calendarEvents = useMemo(() => {
    const events: { [key: string]: Lead[] } = {};
    leads.forEach(lead => {
      if (lead.followUpDate) {
        const dateKey = lead.followUpDate.split('T')[0];
        if (!events[dateKey]) events[dateKey] = [];
        events[dateKey].push(lead);
      }
    });
    return events;
  }, [leads]);

  const getDaysInCalendar = () => {
    const days = [];
    const current = new Date(startDate);
    
    for (let i = 0; i < 42; i++) {
      days.push(new Date(current));
      current.setDate(current.getDate() + 1);
    }
    return days;
  };

  const formatDateKey = (date: Date) => {
    return date.toISOString().split('T')[0];
  };

  const isToday = (date: Date) => {
    const today = new Date();
    return date.toDateString() === today.toDateString();
  };

  const isCurrentMonth = (date: Date) => {
    return date.getMonth() === currentDate.getMonth();
  };

  const handleDateHover = (date: Date, event: React.MouseEvent) => {
    const dateKey = formatDateKey(date);
    const dateLeads = calendarEvents[dateKey];
    
    if (dateLeads && dateLeads.length > 0) {
      setTooltip({
        x: event.clientX,
        y: event.clientY,
        leads: dateLeads
      });
      setHoveredDate(dateKey);
    }
  };

  const handleDateClick = (date: Date) => {
    const dateKey = formatDateKey(date);
    const dateLeads = calendarEvents[dateKey];
    
    if (dateLeads && dateLeads.length > 0) {
      setSelectedDate(date);
      setShowDayModal(true);
    }
  };

  const days = getDaysInCalendar();

  return (
    <div className="bg-white rounded-xl border border-gray-200 shadow-sm">
      {/* Calendar Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h3 className="text-lg font-poppins font-semibold text-gray-900">
          Follow-up Calendar
        </h3>
        <div className="flex items-center gap-2">
            <button
            onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}
            className="p-2 hover:bg-gray-100 rounded-lg"
            >
            <ChevronLeft size={16} />
            </button>
          <span className="text-sm font-poppins font-medium text-gray-900 min-w-32 text-center">
            {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
          </span>
            <button
            onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}
            className="p-2 hover:bg-gray-100 rounded-lg"
            >
            <ChevronRight size={16} />
            </button>
          </div>
      </div>

      {/* Calendar Grid */}
      <div className="p-4">
        {/* Day Headers */}
        <div className="grid grid-cols-7 gap-1 mb-2">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
            <div key={day} className="p-2 text-center text-xs font-poppins font-medium text-gray-500">
              {day}
            </div>
          ))}
        </div>

        {/* Calendar Days */}
        <div className="grid grid-cols-7 gap-1">
          {days.map((date, index) => {
            const dateKey = formatDateKey(date);
            const dayLeads = calendarEvents[dateKey] || [];
            const hasEvents = dayLeads.length > 0;
            const isOverdue = date < new Date() && hasEvents;

            return (
              <div
                key={index}
                className={`
                  min-h-16 p-2 border border-gray-100 rounded-lg transition-all duration-200
                  ${isCurrentMonth(date) ? 'bg-white hover:bg-gray-50' : 'bg-gray-50 text-gray-400'}
                  ${isToday(date) ? 'ring-2 ring-blue-500 bg-blue-50' : ''}
                  ${hasEvents ? 'border-blue-300 bg-blue-50 cursor-pointer hover:bg-blue-100' : 'cursor-default'}
                  ${isOverdue ? 'border-red-300 bg-red-50' : ''}
                `}
                onMouseEnter={(e) => handleDateHover(date, e)}
                onMouseLeave={() => {
                  setTooltip(null);
                  setHoveredDate(null);
                }}
                onClick={() => handleDateClick(date)}
              >
                <div className="text-sm font-poppins font-medium">
                  {date.getDate()}
                </div>
                {hasEvents && (
                  <div className="mt-1">
                    <div className={`
                      text-xs px-1 py-0.5 rounded-full text-center font-poppins
                      ${isOverdue ? 'bg-red-200 text-red-800' : 'bg-blue-200 text-blue-800'}
                    `}>
                      {dayLeads.length} lead{dayLeads.length !== 1 ? 's' : ''}
                    </div>
                  </div>
          )}
        </div>
            );
          })}
      </div>
      </div>

      {/* Tooltip */}
      {tooltip && (
        <div
          className="fixed bg-black bg-opacity-90 text-white p-3 rounded-lg shadow-lg z-50 max-w-64"
          style={{ left: tooltip.x + 10, top: tooltip.y - 10 }}
        >
          <div className="text-sm font-poppins font-semibold mb-2">
            Follow-ups ({tooltip.leads.length})
          </div>
          <div className="space-y-1">
            {tooltip.leads.map(lead => (
              <div key={lead.id} className="text-xs font-poppins">
                <div className="font-medium">{lead.title}</div>
                <div className="text-gray-300">{lead.contactPerson} â€¢ {lead.company}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Calendar Day Modal */}
      <CalendarDayModal
        isOpen={showDayModal}
        date={selectedDate}
        leads={selectedDate ? calendarEvents[formatDateKey(selectedDate)] || [] : []}
        onClose={() => {
          setShowDayModal(false);
          setSelectedDate(null);
        }}
        onEditLead={(lead) => {
          setShowDayModal(false);
          setSelectedDate(null);
          onEditLead(lead);
        }}
      />
    </div>
  );
};

// Lead Modal Component
const LeadModal: React.FC<LeadModalProps> = ({ isOpen, lead, onClose, onSave, onDelete, teams, statusConfig, users }) => {
  const [formData, setFormData] = useState<Lead>(lead || {
    id: '',
    title: '',
    description: '',
    contactPerson: '',
    company: '',
    email: '',
    phone: '',
    value: 0,
    currency: 'USD',
    source: '',
    assignee: '',
    teamId: '',
    createdDate: new Date().toISOString().split('T')[0],
    followUpDate: '',
    lastContactDate: '',
    mainStatus: 'New',
    subStatus: 'New Lead',
    priority: 'Warm',
    tags: [],
    notes: '',
    probability: 50,
    expectedCloseDate: '',
    lastActivity: ''
  });

  // Dropdown states
  const [showTeamDropdown, setShowTeamDropdown] = useState(false);
  const [showMainStatusDropdown, setShowMainStatusDropdown] = useState(false);
  const [showSubStatusDropdown, setShowSubStatusDropdown] = useState(false);
  const [showAssigneeDropdown, setShowAssigneeDropdown] = useState(false);
  const [showPriorityDropdown, setShowPriorityDropdown] = useState(false);
  const [showSourceDropdown, setShowSourceDropdown] = useState(false);

  useEffect(() => {
    if (lead) {
      setFormData(lead);
    } else {
      // Reset form for new lead
      setFormData({
        id: '',
        title: '',
        description: '',
        contactPerson: '',
        company: '',
        email: '',
        phone: '',
        value: 0,
        currency: 'USD',
        source: '',
        assignee: '',
        teamId: '',
        createdDate: new Date().toISOString().split('T')[0],
        followUpDate: '',
        lastContactDate: '',
        mainStatus: 'New',
        subStatus: 'New Lead',
        priority: 'Warm',
        tags: [],
        notes: '',
        probability: 50,
        expectedCloseDate: '',
        lastActivity: ''
      });
    }
  }, [lead, isOpen]);

  if (!isOpen) return null;

  const handleSave = () => {
    const newLead = {
      ...formData,
      id: lead?.id || Date.now().toString(),
      lastActivity: `${lead ? 'Updated' : 'Created'} by system`
    };
    onSave(newLead);
    onClose();
  };

  const handleDelete = () => {
    if (lead) {
      onDelete(lead.id);
      onClose();
    }
  };

  // Get available sub-statuses based on selected main status
  const getAvailableSubStatuses = () => {
    const mainStatus = statusConfig.find(status => status.name === formData.mainStatus);
    return mainStatus?.subStatuses || [];
  };

  // Get team name by ID
  const getTeamName = (teamId: string) => {
    const team = teams.find(t => t.id === teamId);
    return team?.name || 'No Team';
  };

  // Get all team members for assignee dropdown
  const getAllTeamMembers = () => {
    if (!formData.teamId) return users;
    const team = teams.find(t => t.id === formData.teamId);
    if (!team) return users;
    return users.filter(user => team.members.some(member => member.id === user.id));
  };

  // Source options
  const sourceOptions = [
    'Website', 'Social Media', 'Email Campaign', 'Cold Call', 'Referral', 
    'Trade Show', 'Partnership', 'Advertisement', 'Direct Mail', 'Other'
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[95vh] overflow-hidden shadow-2xl">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-100 rounded-lg">
              <User size={20} className="text-blue-600" />
            </div>
            <div>
              <h2 className="text-xl font-poppins font-semibold text-gray-900">
                {lead ? 'Edit Lead' : 'Create New Lead'}
              </h2>
              <p className="text-sm text-gray-600">
                {lead ? 'Update lead information and track progress' : 'Add a new lead to your pipeline'}
              </p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-white/50 rounded-lg transition-colors"
          >
            <X size={20} className="text-gray-500" />
          </button>
        </div>

        {/* Form Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(95vh-180px)]">
          <div className="space-y-6">
            {/* Basic Information Section */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h3 className="text-lg font-poppins font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Building size={18} className="text-blue-600" />
                Basic Information
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Lead Title *
            </label>
            <input
              type="text"
                    value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter lead title..."
                    required
            />
          </div>

          <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Company *
            </label>
            <input
              type="text"
                    value={formData.company}
                    onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Company name..."
                    required
            />
          </div>

          <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Contact Person *
                  </label>
                  <input
                    type="text"
                    value={formData.contactPerson}
                    onChange={(e) => setFormData({ ...formData, contactPerson: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Contact person name..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Email
            </label>
            <input
              type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Email address..."
            />
          </div>

          <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Phone
            </label>
            <input
              type="tel"
                    value={formData.phone}
                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Phone number..."
            />
          </div>

                <div className="relative">
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Source
            </label>
                  <button
                    type="button"
                    onClick={() => setShowSourceDropdown(!showSourceDropdown)}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-left flex items-center justify-between"
                  >
                    <span className={formData.source ? 'text-gray-900' : 'text-gray-500'}>
                      {formData.source || 'Select source...'}
                    </span>
                    <ChevronDown size={16} className="text-gray-400" />
                  </button>
                  {showSourceDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10 max-h-48 overflow-y-auto">
                      {sourceOptions.map((source) => (
                        <button
                          key={source}
                          type="button"
                          onClick={() => {
                            setFormData({ ...formData, source });
                            setShowSourceDropdown(false);
                          }}
                          className="w-full p-2 text-left hover:bg-blue-50 text-sm font-poppins"
                        >
                          {source}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
          </div>

            {/* Assignment & Status Section */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h3 className="text-lg font-poppins font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Users size={18} className="text-green-600" />
                Assignment & Status
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Team Selection */}
                <div className="relative">
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Team
            </label>
                  <button
                    type="button"
                    onClick={() => setShowTeamDropdown(!showTeamDropdown)}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-left flex items-center justify-between"
                  >
                    <span className={formData.teamId ? 'text-gray-900' : 'text-gray-500'}>
                      {formData.teamId ? getTeamName(formData.teamId) : 'Select team...'}
                    </span>
                    <ChevronDown size={16} className="text-gray-400" />
                  </button>
                  {showTeamDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10">
                      <button
                        type="button"
                        onClick={() => {
                          setFormData({ ...formData, teamId: '', assignee: '' });
                          setShowTeamDropdown(false);
                        }}
                        className="w-full p-3 text-left hover:bg-blue-50 text-sm font-poppins border-b border-gray-100"
                      >
                        <span className="text-gray-500">No Team</span>
                      </button>
                      {teams.map((team) => (
                        <button
                          key={team.id}
                          type="button"
                          onClick={() => {
                            setFormData({ ...formData, teamId: team.id, assignee: '' });
                            setShowTeamDropdown(false);
                          }}
                          className="w-full p-3 text-left hover:bg-blue-50 text-sm font-poppins border-b border-gray-100 last:border-b-0"
                        >
                          <div className="flex items-center gap-2">
                            <div 
                              className="w-3 h-3 rounded-full"
                              style={{ backgroundColor: team.color }}
                            ></div>
                            <span className="text-gray-900">{team.name}</span>
                            <span className="text-gray-500">({team.members.length} members)</span>
                          </div>
                        </button>
                      ))}
                    </div>
                  )}
          </div>

                {/* Assignee Selection */}
                <div className="relative">
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Assignee
                  </label>
                  <button
                    type="button"
                    onClick={() => setShowAssigneeDropdown(!showAssigneeDropdown)}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-left flex items-center justify-between"
                  >
                    <span className={formData.assignee ? 'text-gray-900' : 'text-gray-500'}>
                      {formData.assignee || 'Select assignee...'}
                    </span>
                    <ChevronDown size={16} className="text-gray-400" />
                  </button>
                  {showAssigneeDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10 max-h-48 overflow-y-auto">
                      {getAllTeamMembers().map((user) => (
                        <button
                          key={user.id}
                          type="button"
                          onClick={() => {
                            setFormData({ ...formData, assignee: user.name });
                            setShowAssigneeDropdown(false);
                          }}
                          className="w-full p-3 text-left hover:bg-blue-50 text-sm font-poppins border-b border-gray-100 last:border-b-0"
                        >
                          <div className="flex items-center gap-2">
                            <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-medium">
                              {user.name.split(' ').map(n => n[0]).join('')}
                            </div>
          <div>
                              <div className="text-gray-900">{user.name}</div>
                              <div className="text-gray-500 text-xs">{user.role}</div>
                            </div>
                          </div>
                        </button>
                      ))}
                    </div>
                  )}
                </div>

                {/* Main Status */}
                <div className="relative">
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Main Status
            </label>
                  <button
                    type="button"
                    onClick={() => setShowMainStatusDropdown(!showMainStatusDropdown)}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-left flex items-center justify-between"
                  >
                    <div className="flex items-center gap-2">
                      {statusConfig.find(s => s.name === formData.mainStatus) && (
                        <div 
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: statusConfig.find(s => s.name === formData.mainStatus)?.color }}
                        ></div>
                      )}
                      <span className="text-gray-900">{formData.mainStatus}</span>
                    </div>
                    <ChevronDown size={16} className="text-gray-400" />
                  </button>
                  {showMainStatusDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10">
                      {statusConfig.map((status) => (
                        <button
                          key={status.id}
                          type="button"
                          onClick={() => {
                            setFormData({ 
                              ...formData, 
                              mainStatus: status.name,
                              subStatus: status.subStatuses[0]?.name || ''
                            });
                            setShowMainStatusDropdown(false);
                          }}
                          className="w-full p-3 text-left hover:bg-blue-50 text-sm font-poppins border-b border-gray-100 last:border-b-0"
                        >
                          <div className="flex items-center gap-2">
                            <div 
                              className="w-3 h-3 rounded-full"
                              style={{ backgroundColor: status.color }}
                            ></div>
                            <span className="text-gray-900">{status.name}</span>
                          </div>
                        </button>
                      ))}
                    </div>
                  )}
          </div>

                {/* Sub Status */}
                <div className="relative">
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Sub Status
                  </label>
                  <button
                    type="button"
                    onClick={() => setShowSubStatusDropdown(!showSubStatusDropdown)}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-left flex items-center justify-between"
                  >
                    <div className="flex items-center gap-2">
                      {getAvailableSubStatuses().find(s => s.name === formData.subStatus) && (
                        <div 
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: getAvailableSubStatuses().find(s => s.name === formData.subStatus)?.color }}
                        ></div>
                      )}
                      <span className="text-gray-900">{formData.subStatus}</span>
                    </div>
                    <ChevronDown size={16} className="text-gray-400" />
                  </button>
                  {showSubStatusDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10">
                      {getAvailableSubStatuses().map((subStatus) => (
                        <button
                          key={subStatus.id}
                          type="button"
                          onClick={() => {
                            setFormData({ ...formData, subStatus: subStatus.name });
                            setShowSubStatusDropdown(false);
                          }}
                          className="w-full p-3 text-left hover:bg-blue-50 text-sm font-poppins border-b border-gray-100 last:border-b-0"
                        >
                          <div className="flex items-center gap-2">
                            <div 
                              className="w-3 h-3 rounded-full"
                              style={{ backgroundColor: subStatus.color }}
                            ></div>
                            <span className="text-gray-900">{subStatus.name}</span>
                          </div>
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Deal Information Section */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h3 className="text-lg font-poppins font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <DollarSign size={18} className="text-yellow-600" />
                Deal Information
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Deal Value
            </label>
            <input
              type="number"
                    value={formData.value}
                    onChange={(e) => setFormData({ ...formData, value: Number(e.target.value) })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="0"
            />
          </div>

                <div className="relative">
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Priority
            </label>
                  <button
                    type="button"
                    onClick={() => setShowPriorityDropdown(!showPriorityDropdown)}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-left flex items-center justify-between"
                  >
                    <div className="flex items-center gap-2">
                      <div className={`w-3 h-3 rounded-full ${
                        formData.priority === 'Hot' ? 'bg-red-500' :
                        formData.priority === 'Warm' ? 'bg-orange-500' : 'bg-blue-500'
                      }`}></div>
                      <span className="text-gray-900">{formData.priority}</span>
                    </div>
                    <ChevronDown size={16} className="text-gray-400" />
                  </button>
                  {showPriorityDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10">
                      {['Hot', 'Warm', 'Cold'].map((priority) => (
                        <button
                          key={priority}
                          type="button"
                          onClick={() => {
                            setFormData({ ...formData, priority: priority as 'Hot' | 'Warm' | 'Cold' });
                            setShowPriorityDropdown(false);
                          }}
                          className="w-full p-3 text-left hover:bg-blue-50 text-sm font-poppins border-b border-gray-100 last:border-b-0"
                        >
                          <div className="flex items-center gap-2">
                            <div className={`w-3 h-3 rounded-full ${
                              priority === 'Hot' ? 'bg-red-500' :
                              priority === 'Warm' ? 'bg-orange-500' : 'bg-blue-500'
                            }`}></div>
                            <span className="text-gray-900">{priority}</span>
                          </div>
                        </button>
                      ))}
                    </div>
                  )}
          </div>

          <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Probability (%)
            </label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={formData.probability}
                    onChange={(e) => setFormData({ ...formData, probability: Number(e.target.value) })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="50"
                  />
          </div>

          <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Follow Up Date
            </label>
                  <input
                    type="date"
                    value={formData.followUpDate}
                    onChange={(e) => setFormData({ ...formData, followUpDate: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
          </div>

                <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
                    Expected Close Date
            </label>
            <input
                    type="date"
                    value={formData.expectedCloseDate}
                    onChange={(e) => setFormData({ ...formData, expectedCloseDate: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
          </div>

            {/* Additional Information */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h3 className="text-lg font-poppins font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <FileText size={18} className="text-purple-600" />
                Additional Information
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
              Description
            </label>
            <textarea
                    value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              rows={3}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Lead description..."
            />
          </div>

                <div>
                  <label className="block text-sm font-poppins font-medium text-gray-700 mb-2">
              Notes
            </label>
            <textarea
                    value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              rows={3}
                    className="w-full p-3 border border-gray-300 rounded-lg font-poppins focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Internal notes..."
            />
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50">
          <div>
            {lead && (
              <button
                onClick={handleDelete}
                className="px-4 py-2 text-red-600 border border-red-300 rounded-lg font-poppins hover:bg-red-50 flex items-center gap-2 transition-colors"
              >
                <Trash2 size={16} />
                Delete Lead
              </button>
            )}
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={onClose}
              className="px-6 py-2 text-gray-700 border border-gray-300 rounded-lg font-poppins hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="px-6 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg font-poppins hover:from-blue-700 hover:to-indigo-700 flex items-center gap-2 transition-colors"
            >
              <Save size={16} />
              {lead ? 'Update Lead' : 'Create Lead'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Status Management Component
// Status Management Modal removed - now using inline editor

const LeadPipelinePage: React.FC<LeadPipelinePageProps> = ({ defaultTab = 'pipeline' }) => {
  // Tab and view state
  const [activeTab, setActiveTab] = useState(defaultTab);
  const [viewMode, setViewMode] = useState<'kanban' | 'list' | 'calendar'>('kanban');
  const [cardMode, setCardMode] = useState<'colorful' | 'minimal'>('colorful');
  
  // Filter states
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('All');
  const [selectedMainStatus, setSelectedMainStatus] = useState('All');
  const [selectedSubStatuses, setSelectedSubStatuses] = useState<string[]>([]);
  const [selectedPriority, setSelectedPriority] = useState('All');
  const [selectedAssignee, setSelectedAssignee] = useState('All');
  const [selectedTeam, setSelectedTeam] = useState('All');
  const [minProbability, setMinProbability] = useState(0);
  const [maxProbability, setMaxProbability] = useState(100);
  const [dateRange, setDateRange] = useState<DateRange | null>(null);
  
  // Dropdown states
  const [showMainStatusDropdown, setShowMainStatusDropdown] = useState(false);
  const [showSubStatusDropdown, setShowSubStatusDropdown] = useState(false);
  const [showPriorityDropdown, setShowPriorityDropdown] = useState(false);
  const [showAssigneeDropdown, setShowAssigneeDropdown] = useState(false);
  const [showTeamDropdown, setShowTeamDropdown] = useState(false);
  
  // Modal states
  const [showLeadModal, setShowLeadModal] = useState(false);
  // showStatusManagement state removed - using inline editor
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  
  // Settings sub-navigation state
  const [settingsView, setSettingsView] = useState<'teams' | 'statuses' | 'users'>('teams');
  
  // Status Management Modal States
  const [showAddStatusModal, setShowAddStatusModal] = useState(false);
  const [showStatusSettingsModal, setShowStatusSettingsModal] = useState(false);
  const [selectedStatusForSettings, setSelectedStatusForSettings] = useState<StatusConfig | null>(null);
  const [selectedSubStatusForSettings, setSelectedSubStatusForSettings] = useState<{ statusId: string; subStatus: SubStatus } | null>(null);
  const [newStatusForm, setNewStatusForm] = useState({
    name: '',
    color: '#3B82F6',
    order: 1
  });
  
  // Status configuration
  const [statusConfig, setStatusConfig] = useState<StatusConfig[]>([
    {
      id: '1',
      name: 'New',
      color: '#3B82F6',
      order: 1,
      subStatuses: [
        { id: '1-1', name: 'Unqualified', color: '#6B7280', order: 1 },
        { id: '1-2', name: 'New Lead', color: '#3B82F6', order: 2 }
      ]
    },
    {
      id: '2',
      name: 'Qualified',
      color: '#10B981',
      order: 2,
      subStatuses: [
        { id: '2-1', name: 'Contacted', color: '#059669', order: 1 },
        { id: '2-2', name: 'Interested', color: '#10B981', order: 2 }
      ]
    },
    {
      id: '3',
      name: 'Proposal',
      color: '#F59E0B',
      order: 3,
      subStatuses: [
        { id: '3-1', name: 'Proposal Sent', color: '#D97706', order: 1 },
        { id: '3-2', name: 'Under Review', color: '#F59E0B', order: 2 }
      ]
    },
    {
      id: '4',
      name: 'Closed',
      color: '#8B5CF6',
      order: 4,
      subStatuses: [
        { id: '4-1', name: 'Won', color: '#10B981', order: 1 },
        { id: '4-2', name: 'Lost', color: '#EF4444', order: 2 }
      ]
    }
  ]);

  // Sample teams data
  const [teams, setTeams] = useState<Team[]>([
    {
      id: '1',
      name: 'Enterprise Sales',
      description: 'Handles large enterprise deals and strategic accounts',
      color: '#3B82F6',
      status: 'Active',
      createdDate: '2024-01-15',
      members: [
        { id: '1', name: 'Sarah Wilson', email: 'sarah@company.com', role: 'Lead', joinDate: '2024-01-15' },
        { id: '2', name: 'John Smith', email: 'john@company.com', role: 'Manager', joinDate: '2024-01-16' },
        { id: '3', name: 'Michael Brown', email: 'michael@company.com', role: 'Member', joinDate: '2024-01-17' }
      ]
    },
    {
      id: '2', 
      name: 'SMB Sales',
      description: 'Small and medium business acquisition team',
      color: '#10B981',
      status: 'Active',
      createdDate: '2024-01-10',
      members: [
        { id: '4', name: 'Lisa Thompson', email: 'lisa@company.com', role: 'Lead', joinDate: '2024-01-10' },
        { id: '5', name: 'David Park', email: 'david@company.com', role: 'Member', joinDate: '2024-01-11' },
        { id: '6', name: 'Alex Chen', email: 'alex@company.com', role: 'Member', joinDate: '2024-01-12' }
      ]
    },
    {
      id: '3',
      name: 'Inside Sales',
      description: 'Remote sales team for lead qualification and nurturing',
      color: '#F59E0B',
      status: 'Active',
      createdDate: '2024-01-05',
      members: [
        { id: '7', name: 'Emily Davis', email: 'emily@company.com', role: 'Lead', joinDate: '2024-01-05' },
        { id: '8', name: 'Robert Chen', email: 'robert@company.com', role: 'Member', joinDate: '2024-01-06' }
      ]
    }
  ]);

  // Sample users data
  const [users, setUsers] = useState<SalesUser[]>([
    {
      id: '1',
      name: 'Sarah Wilson',
      email: 'sarah@company.com',
      role: 'Manager',
      department: 'Sales',
      teams: ['1'],
      status: 'Active',
      joinDate: '2024-01-15',
      lastActive: '2024-01-25',
      permissions: [
        { id: '1', name: 'Manage Leads', description: 'Create, edit, and delete leads', granted: true },
        { id: '2', name: 'Manage Teams', description: 'Create and manage sales teams', granted: true },
        { id: '3', name: 'View Reports', description: 'Access sales analytics and reports', granted: true },
        { id: '4', name: 'Manage Settings', description: 'Configure system settings', granted: false }
      ]
    },
    {
      id: '2',
      name: 'John Smith', 
      email: 'john@company.com',
      role: 'Agent',
      department: 'Sales',
      teams: ['1'],
      status: 'Active',
      joinDate: '2024-01-16',
      lastActive: '2024-01-25',
      permissions: [
        { id: '1', name: 'Manage Leads', description: 'Create, edit, and delete leads', granted: true },
        { id: '2', name: 'Manage Teams', description: 'Create and manage sales teams', granted: false },
        { id: '3', name: 'View Reports', description: 'Access sales analytics and reports', granted: true },
        { id: '4', name: 'Manage Settings', description: 'Configure system settings', granted: false }
      ]
    },
    {
      id: '3',
      name: 'Lisa Thompson',
      email: 'lisa@company.com', 
      role: 'Manager',
      department: 'Sales',
      teams: ['2'],
      status: 'Active',
      joinDate: '2024-01-10',
      lastActive: '2024-01-24',
      permissions: [
        { id: '1', name: 'Manage Leads', description: 'Create, edit, and delete leads', granted: true },
        { id: '2', name: 'Manage Teams', description: 'Create and manage sales teams', granted: true },
        { id: '3', name: 'View Reports', description: 'Access sales analytics and reports', granted: true },
        { id: '4', name: 'Manage Settings', description: 'Configure system settings', granted: false }
      ]
    },
    {
      id: '4',
      name: 'David Park',
      email: 'david@company.com',
      role: 'Agent',
      department: 'Sales', 
      teams: ['2'],
      status: 'Active',
      joinDate: '2024-01-11',
      lastActive: '2024-01-25',
      permissions: [
        { id: '1', name: 'Manage Leads', description: 'Create, edit, and delete leads', granted: true },
        { id: '2', name: 'Manage Teams', description: 'Create and manage sales teams', granted: false },
        { id: '3', name: 'View Reports', description: 'Access sales analytics and reports', granted: false },
        { id: '4', name: 'Manage Settings', description: 'Configure system settings', granted: false }
      ]
    },
    {
      id: '5',
      name: 'Alex Chen',
      email: 'alex@company.com',
      role: 'Agent',
      department: 'Sales',
      teams: ['2'],
      status: 'Active',
      joinDate: '2024-01-12',
      lastActive: '2024-01-25',
      permissions: [
        { id: '1', name: 'Manage Leads', description: 'Create, edit, and delete leads', granted: true },
        { id: '2', name: 'Manage Teams', description: 'Create and manage sales teams', granted: false },
        { id: '3', name: 'View Reports', description: 'Access sales analytics and reports', granted: false },
        { id: '4', name: 'Manage Settings', description: 'Configure system settings', granted: false }
      ]
    },
    {
      id: '6',
      name: 'Emily Davis',
      email: 'emily@company.com',
      role: 'Manager',
      department: 'Sales',
      teams: ['3'],
      status: 'Active',
      joinDate: '2024-01-05',
      lastActive: '2024-01-23',
      permissions: [
        { id: '1', name: 'Manage Leads', description: 'Create, edit, and delete leads', granted: true },
        { id: '2', name: 'Manage Teams', description: 'Create and manage sales teams', granted: true },
        { id: '3', name: 'View Reports', description: 'Access sales analytics and reports', granted: true },
        { id: '4', name: 'Manage Settings', description: 'Configure system settings', granted: false }
      ]
    }
  ]);

  // Sample leads data
  const [leads, setLeads] = useState<Lead[]>([
    // NEW STATUS - Unqualified Sub-Status
    {
      id: '1',
      title: 'Website Redesign Inquiry',
      description: 'Small business owner asking about website redesign services',
      contactPerson: 'Jennifer Martinez',
      company: 'Local Cafe',
      email: 'jennifer@localcafe.com',
      phone: '+1 (555) 111-2222',
      value: 8000,
      currency: 'USD',
      source: 'Website',
      assignee: 'Alex Chen',
      createdDate: '2024-01-20',
      followUpDate: '2024-01-25',
      lastContactDate: '2024-01-21',
      mainStatus: 'New',
      subStatus: 'Unqualified',
      priority: 'Cold',
      tags: ['Website', 'Design', 'Small Business'],
      notes: 'Initial inquiry, needs qualification call',
      probability: 20,
      expectedCloseDate: '2024-03-01',
      lastActivity: 'Received contact form submission'
    },
    {
      id: '2',
      title: 'E-commerce Platform Request',
      description: 'Startup looking for e-commerce solution',
      contactPerson: 'Michael Rodriguez',
      company: 'Startup Ventures',
      email: 'mike@startupventures.com',
      phone: '+1 (555) 333-4444',
      value: 12000,
      currency: 'USD',
      source: 'Cold Email',
      assignee: 'Alex Chen',
      createdDate: '2024-01-18',
      followUpDate: '2024-01-24',
      lastContactDate: '2024-01-19',
      mainStatus: 'New',
      subStatus: 'Unqualified',
      priority: 'Warm',
      tags: ['E-commerce', 'Startup', 'Platform'],
      notes: 'Very early stage, unclear budget',
      probability: 15,
      expectedCloseDate: '2024-04-15',
      lastActivity: 'Responded to cold outreach'
    },
    
    // NEW STATUS - New Lead Sub-Status
    {
      id: '3',
      title: 'Mobile App Development',
      description: 'Tech company needs mobile app for their service',
      contactPerson: 'Sarah Williams',
      company: 'TechFlow Solutions',
      email: 'sarah@techflow.com',
      phone: '+1 (555) 555-6666',
      value: 45000,
      currency: 'USD',
      source: 'Referral',
      assignee: 'David Park',
      createdDate: '2024-01-22',
      followUpDate: '2024-01-26',
      lastContactDate: '2024-01-23',
      mainStatus: 'New',
      subStatus: 'New Lead',
      priority: 'Hot',
      tags: ['Mobile App', 'Development', 'Tech'],
      notes: 'Referred by existing client, high potential',
      probability: 60,
      expectedCloseDate: '2024-02-20',
      lastActivity: 'Initial discovery call scheduled'
    },
    {
      id: '4',
      title: 'Digital Marketing Campaign',
      description: 'Retail business wants comprehensive digital marketing',
      contactPerson: 'Robert Taylor',
      company: 'Fashion Forward',
      email: 'robert@fashionforward.com',
      phone: '+1 (555) 777-8888',
      value: 25000,
      currency: 'USD',
      source: 'Social Media',
      assignee: 'Lisa Thompson',
      createdDate: '2024-01-19',
      followUpDate: '2024-01-27',
      lastContactDate: '2024-01-20',
      mainStatus: 'New',
      subStatus: 'New Lead',
      priority: 'Warm',
      tags: ['Digital Marketing', 'Retail', 'Campaign'],
      notes: 'Active on social media, good engagement',
      probability: 40,
      expectedCloseDate: '2024-03-10',
      lastActivity: 'Connected via LinkedIn'
    },

    // QUALIFIED STATUS - Contacted Sub-Status
    {
      id: '5',
      title: 'Enterprise CRM Implementation',
      description: 'Large enterprise looking for comprehensive CRM solution',
      contactPerson: 'John Smith',
      company: 'TechCorp Industries',
      email: 'john.smith@techcorp.com',
      phone: '+1 (555) 123-4567',
      value: 250000,
      currency: 'USD',
      source: 'Website',
      assignee: 'Sarah Wilson',
      assignees: ['Sarah Wilson', 'Michael Brown', 'David Park'],
      createdDate: '2024-01-15',
      followUpDate: '2024-01-25',
      lastContactDate: '2024-01-20',
      mainStatus: 'Qualified',
      subStatus: 'Contacted',
      priority: 'Hot',
      tags: ['Enterprise', 'CRM', 'Implementation'],
      notes: 'Very interested, needs proposal by end of month',
      probability: 75,
      expectedCloseDate: '2024-02-28',
      lastActivity: 'Sent detailed proposal'
    },
    {
      id: '6',
      title: 'Cloud Migration Services',
      description: 'Mid-size company moving to cloud infrastructure',
      contactPerson: 'Amanda Davis',
      company: 'CloudTech Corp',
      email: 'amanda@cloudtech.com',
      phone: '+1 (555) 999-0000',
      value: 85000,
      currency: 'USD',
      source: 'Trade Show',
      assignee: 'Michael Brown',
      assignees: ['Michael Brown', 'Alex Chen'],
      createdDate: '2024-01-12',
      followUpDate: '2024-01-30',
      lastContactDate: '2024-01-18',
      mainStatus: 'Qualified',
      subStatus: 'Contacted',
      priority: 'Hot',
      tags: ['Cloud', 'Migration', 'Infrastructure'],
      notes: 'Strong technical team, clear requirements',
      probability: 70,
      expectedCloseDate: '2024-03-15',
      lastActivity: 'Technical requirements gathering'
    },

    // QUALIFIED STATUS - Interested Sub-Status
    {
      id: '7',
      title: 'Small Business Marketing Automation',
      description: 'Local business needs marketing automation tools',
      contactPerson: 'Emily Johnson',
      company: 'Local Marketing Co',
      email: 'emily@localmarketing.com',
      phone: '+1 (555) 987-6543',
      value: 15000,
      currency: 'USD',
      source: 'Referral',
      assignee: 'Mike Davis',
      createdDate: '2024-01-18',
      followUpDate: '2024-01-28',
      lastContactDate: '2024-01-22',
      mainStatus: 'Qualified',
      subStatus: 'Interested',
      priority: 'Warm',
      tags: ['Small Business', 'Marketing', 'Automation'],
      notes: 'Budget concerns, exploring options',
      probability: 45,
      expectedCloseDate: '2024-03-15',
      lastActivity: 'Initial consultation call'
    },
    {
      id: '8',
      title: 'Data Analytics Platform',
      description: 'Healthcare company needs data analytics solution',
      contactPerson: 'Dr. Patricia Wilson',
      company: 'HealthData Analytics',
      email: 'patricia@healthdata.com',
      phone: '+1 (555) 222-3333',
      value: 120000,
      currency: 'USD',
      source: 'Industry Event',
      assignee: 'James Miller',
      createdDate: '2024-01-10',
      followUpDate: '2024-02-01',
      lastContactDate: '2024-01-24',
      mainStatus: 'Qualified',
      subStatus: 'Interested',
      priority: 'Hot',
      tags: ['Healthcare', 'Analytics', 'Data'],
      notes: 'Compliance requirements discussion needed',
      probability: 65,
      expectedCloseDate: '2024-04-01',
      lastActivity: 'Demo presentation completed'
    },

    // PROPOSAL STATUS - Proposal Sent Sub-Status
    {
      id: '9',
      title: 'Custom Software Development',
      description: 'Manufacturing company needs custom inventory system',
      contactPerson: 'Thomas Anderson',
      company: 'ManufacturePro Inc',
      email: 'thomas@manufacturepro.com',
      phone: '+1 (555) 444-5555',
      value: 180000,
      currency: 'USD',
      source: 'Website',
      assignee: 'Rachel Green',
      createdDate: '2024-01-05',
      followUpDate: '2024-01-29',
      lastContactDate: '2024-01-25',
      mainStatus: 'Proposal',
      subStatus: 'Proposal Sent',
      priority: 'Hot',
      tags: ['Manufacturing', 'Custom Software', 'Inventory'],
      notes: 'Proposal sent, awaiting decision from board',
      probability: 80,
      expectedCloseDate: '2024-02-15',
      lastActivity: 'Sent comprehensive proposal'
    },
    {
      id: '10',
      title: 'Digital Transformation Project',
      description: 'Traditional bank modernizing their systems',
      contactPerson: 'Charles Thompson',
      company: 'First National Bank',
      email: 'charles@firstnational.com',
      phone: '+1 (555) 666-7777',
      value: 500000,
      currency: 'USD',
      source: 'Partnership',
      assignee: 'Sarah Wilson',
      assignees: ['Sarah Wilson', 'Lisa Thompson', 'Alex Chen', 'Emily Davis'],
      createdDate: '2024-01-08',
      followUpDate: '2024-02-05',
      lastContactDate: '2024-01-26',
      mainStatus: 'Proposal',
      subStatus: 'Proposal Sent',
      priority: 'Hot',
      tags: ['Banking', 'Digital Transformation', 'Enterprise'],
      notes: 'Multi-phase project proposal submitted',
      probability: 85,
      expectedCloseDate: '2024-03-30',
      lastActivity: 'Executive presentation given'
    },

    // PROPOSAL STATUS - Under Review Sub-Status
    {
      id: '11',
      title: 'AI-Powered Customer Service',
      description: 'E-commerce giant implementing AI chatbot solution',
      contactPerson: 'Lisa Rodriguez',
      company: 'MegaCommerce Ltd',
      email: 'lisa@megacommerce.com',
      phone: '+1 (555) 888-9999',
      value: 320000,
      currency: 'USD',
      source: 'Cold Outreach',
      assignee: 'David Park',
      createdDate: '2024-01-02',
      followUpDate: '2024-02-08',
      lastContactDate: '2024-01-27',
      mainStatus: 'Proposal',
      subStatus: 'Under Review',
      priority: 'Hot',
      tags: ['AI', 'Customer Service', 'E-commerce'],
      notes: 'Technical review in progress, positive feedback',
      probability: 70,
      expectedCloseDate: '2024-02-20',
      lastActivity: 'Technical team review meeting'
    },
    {
      id: '12',
      title: 'Security Audit & Compliance',
      description: 'Financial services firm needs security assessment',
      contactPerson: 'Mark Stevens',
      company: 'SecureFinance Corp',
      email: 'mark@securefinance.com',
      phone: '+1 (555) 101-2030',
      value: 75000,
      currency: 'USD',
      source: 'Referral',
      assignee: 'Michael Brown',
      createdDate: '2024-01-14',
      followUpDate: '2024-02-10',
      lastContactDate: '2024-01-28',
      mainStatus: 'Proposal',
      subStatus: 'Under Review',
      priority: 'Warm',
      tags: ['Security', 'Compliance', 'Financial'],
      notes: 'Legal team reviewing proposal terms',
      probability: 60,
      expectedCloseDate: '2024-03-05',
      lastActivity: 'Proposal refinements submitted'
    },

    // CLOSED STATUS - Won Sub-Status
    {
      id: '13',
      title: 'Website Development Project',
      description: 'Successfully delivered website for law firm',
      contactPerson: 'Jennifer Adams',
      company: 'Adams & Associates Law',
      email: 'jennifer@adamslaw.com',
      phone: '+1 (555) 304-5060',
      value: 35000,
      currency: 'USD',
      source: 'Referral',
      assignee: 'Alex Chen',
      createdDate: '2023-12-01',
      followUpDate: '2024-01-15',
      lastContactDate: '2024-01-15',
      mainStatus: 'Closed',
      subStatus: 'Won',
      priority: 'Hot',
      tags: ['Website', 'Legal', 'Development'],
      notes: 'Project completed successfully, client very satisfied',
      probability: 100,
      expectedCloseDate: '2024-01-15',
      lastActivity: 'Project delivered and signed off'
    },
    {
      id: '14',
      title: 'Mobile App Development',
      description: 'Fitness app successfully launched',
      contactPerson: 'Kevin Walsh',
      company: 'FitLife Technologies',
      email: 'kevin@fitlife.com',
      phone: '+1 (555) 708-9010',
      value: 90000,
      currency: 'USD',
      source: 'Website',
      assignee: 'Lisa Thompson',
      createdDate: '2023-11-15',
      followUpDate: '2024-01-10',
      lastContactDate: '2024-01-10',
      mainStatus: 'Closed',
      subStatus: 'Won',
      priority: 'Hot',
      tags: ['Mobile App', 'Fitness', 'Technology'],
      notes: 'App launched successfully, discussing phase 2',
      probability: 100,
      expectedCloseDate: '2024-01-10',
      lastActivity: 'Final delivery and payment received'
    },

    // CLOSED STATUS - Lost Sub-Status
    {
      id: '15',
      title: 'ERP System Implementation',
      description: 'Large manufacturing company chose competitor',
      contactPerson: 'Richard Clark',
      company: 'Global Manufacturing',
      email: 'richard@globalmanuf.com',
      phone: '+1 (555) 112-1314',
      value: 400000,
      currency: 'USD',
      source: 'Trade Show',
      assignee: 'Sarah Wilson',
      createdDate: '2023-10-20',
      followUpDate: '2024-01-12',
      lastContactDate: '2024-01-12',
      mainStatus: 'Closed',
      subStatus: 'Lost',
      priority: 'Hot',
      tags: ['ERP', 'Manufacturing', 'Enterprise'],
      notes: 'Lost to competitor due to lower pricing',
      probability: 0,
      expectedCloseDate: '2024-01-12',
      lastActivity: 'Received rejection notification'
    },
    {
      id: '16',
      title: 'Marketing Automation Platform',
      description: 'Agency decided to build in-house solution',
      contactPerson: 'Nancy Foster',
      company: 'Creative Agency Plus',
      email: 'nancy@creativeplus.com',
      phone: '+1 (555) 516-1718',
      value: 55000,
      currency: 'USD',
      source: 'Cold Email',
      assignee: 'Mike Davis',
      createdDate: '2023-12-10',
      followUpDate: '2024-01-08',
      lastContactDate: '2024-01-08',
      mainStatus: 'Closed',
      subStatus: 'Lost',
      priority: 'Warm',
      tags: ['Marketing', 'Automation', 'Agency'],
      notes: 'Client decided to develop internal solution',
      probability: 0,
      expectedCloseDate: '2024-01-08',
      lastActivity: 'Final follow-up call completed'
    },

    // Additional leads for better distribution
    {
      id: '17',
      title: 'Blockchain Integration',
      description: 'FinTech startup exploring blockchain solutions',
      contactPerson: 'Sofia Martinez',
      company: 'CryptoFinance Inc',
      email: 'sofia@cryptofinance.com',
      phone: '+1 (555) 920-2122',
      value: 150000,
      currency: 'USD',
      source: 'Industry Event',
      assignee: 'James Miller',
      createdDate: '2024-01-16',
      followUpDate: '2024-02-02',
      lastContactDate: '2024-01-29',
      mainStatus: 'Qualified',
      subStatus: 'Interested',
      priority: 'Hot',
      tags: ['Blockchain', 'FinTech', 'Innovation'],
      notes: 'Exploring proof of concept development',
      probability: 55,
      expectedCloseDate: '2024-04-20',
      lastActivity: 'Technical feasibility discussion'
    },
    {
      id: '18',
      title: 'IoT Dashboard Development',
      description: 'Smart city project requires IoT monitoring platform',
      contactPerson: 'William Turner',
      company: 'Smart City Solutions',
      email: 'william@smartcity.com',
      phone: '+1 (555) 324-2526',
      value: 200000,
      currency: 'USD',
      source: 'Government RFP',
      assignee: 'Rachel Green',
      createdDate: '2024-01-11',
      followUpDate: '2024-02-12',
      lastContactDate: '2024-01-30',
      mainStatus: 'Proposal',
      subStatus: 'Under Review',
      priority: 'Hot',
      tags: ['IoT', 'Government', 'Smart City'],
      notes: 'Government tender under evaluation',
      probability: 75,
      expectedCloseDate: '2024-03-25',
      lastActivity: 'RFP response submitted'
    },
    {
      id: '19',
      title: 'Social Media Management Tool',
      description: 'Marketing agency needs comprehensive social media platform',
      contactPerson: 'Isabella Garcia',
      company: 'Digital Wave Agency',
      email: 'isabella@digitalwave.com',
      phone: '+1 (555) 728-2930',
      value: 28000,
      currency: 'USD',
      source: 'Referral',
      assignee: 'Alex Chen',
      createdDate: '2024-01-21',
      followUpDate: '2024-01-31',
      lastContactDate: '2024-01-29',
      mainStatus: 'New',
      subStatus: 'New Lead',
      priority: 'Warm',
      tags: ['Social Media', 'Marketing', 'Agency'],
      notes: 'Referred by existing client, scheduling demo',
      probability: 50,
      expectedCloseDate: '2024-03-18',
      lastActivity: 'Demo scheduled for next week'
    },
    {
      id: '20',
      title: 'Learning Management System',
      description: 'University upgrading their online learning platform',
      contactPerson: 'Professor David Kim',
      company: 'Metropolitan University',
      email: 'david.kim@metrou.edu',
      phone: '+1 (555) 132-3334',
      value: 175000,
      currency: 'USD',
      source: 'Academic Partnership',
      assignee: 'David Park',
      createdDate: '2024-01-07',
      followUpDate: '2024-02-15',
      lastContactDate: '2024-01-31',
      mainStatus: 'Proposal',
      subStatus: 'Proposal Sent',
      priority: 'Warm',
      tags: ['Education', 'LMS', 'University'],
      notes: 'Academic committee reviewing proposal',
      probability: 65,
      expectedCloseDate: '2024-04-10',
      lastActivity: 'Proposal presentation to committee'
    }
  ]);

  // Filtered data
  const filteredLeads = useMemo(() => {
    return leads.filter(lead => {
      const matchesSearch = lead.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           lead.contactPerson.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           lead.company.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesStatus = selectedStatus === 'All' || lead.mainStatus === selectedStatus;
      const matchesMainStatus = selectedMainStatus === 'All' || lead.mainStatus === selectedMainStatus;
      const matchesSubStatus = selectedSubStatuses.length === 0 || selectedSubStatuses.includes(lead.subStatus);
      const matchesPriority = selectedPriority === 'All' || lead.priority === selectedPriority;
      const matchesAssignee = selectedAssignee === 'All' || lead.assignee === selectedAssignee;
      const matchesProbability = lead.probability >= minProbability && lead.probability <= maxProbability;
      
      return matchesSearch && matchesStatus && matchesMainStatus && matchesSubStatus && matchesPriority && matchesAssignee && matchesProbability;
    });
  }, [leads, searchQuery, selectedStatus, selectedMainStatus, selectedSubStatuses, selectedPriority, selectedAssignee, minProbability, maxProbability]);

  // Statistics
  const stats = useMemo(() => {
    const totalValue = filteredLeads.reduce((sum, lead) => sum + lead.value, 0);
    const hotLeads = filteredLeads.filter(lead => lead.priority === 'Hot').length;
    const avgProbability = filteredLeads.length > 0 
      ? Math.round(filteredLeads.reduce((sum, lead) => sum + lead.probability, 0) / filteredLeads.length)
      : 0;
    
    return {
      totalLeads: filteredLeads.length,
      totalValue: totalValue,
      hotLeads: hotLeads,
      avgProbability: avgProbability
    };
  }, [filteredLeads]);

  // Get leads by status for kanban view
  const leadsByStatus = useMemo(() => {
    const grouped: { [key: string]: Lead[] } = {};
    statusConfig.forEach(status => {
      grouped[status.name] = filteredLeads.filter(lead => lead.mainStatus === status.name);
    });
    return grouped;
  }, [filteredLeads, statusConfig]);

  const statuses = statusConfig.map(s => s.name);
  const mainStatuses = ['All', ...statusConfig.map(s => s.name)];
  const allSubStatuses = statusConfig.reduce<SubStatus[]>((acc, status) => {
    return [...acc, ...status.subStatuses];
  }, []);
  const currentSubStatuses = selectedMainStatus === 'All' 
    ? allSubStatuses 
    : statusConfig.find(s => s.name === selectedMainStatus)?.subStatuses || [];
  const priorities = ['All', 'Hot', 'Warm', 'Cold'];
  const assignees = ['All', ...Array.from(new Set(leads.map(lead => lead.assignee)))];

  // Calculate lead counts for filter dropdowns
  const mainStatusCounts = useMemo(() => {
    const counts: { [key: string]: number } = {};
    counts['All'] = leads.length;
    
    statusConfig.forEach(status => {
      counts[status.name] = leads.filter(lead => lead.mainStatus === status.name).length;
    });
    
    return counts;
  }, [leads, statusConfig]);

  const subStatusCounts = useMemo(() => {
    const counts: { [key: string]: number } = {};
    
    allSubStatuses.forEach(subStatus => {
      counts[subStatus.name] = leads.filter(lead => lead.subStatus === subStatus.name).length;
    });
    
    return counts;
  }, [leads, allSubStatuses]);

  const priorityCounts = useMemo(() => {
    const counts: { [key: string]: number } = {};
    counts['All'] = leads.length;
    priorities.slice(1).forEach(priority => {
      counts[priority] = leads.filter(lead => lead.priority === priority).length;
    });
    return counts;
  }, [leads, priorities]);

  const assigneeCounts = useMemo(() => {
    const counts: { [key: string]: number } = {};
    counts['All'] = leads.length;
    assignees.slice(1).forEach(assignee => {
      counts[assignee] = leads.filter(lead => lead.assignee === assignee).length;
    });
    return counts;
  }, [leads, assignees]);

  // Helper functions for filter dropdowns
  const handleMainStatusChange = (mainStatus: string) => {
    setSelectedMainStatus(mainStatus);
    setSelectedSubStatuses([]); // Reset sub-status selection when main status changes
    setShowMainStatusDropdown(false);
  };

  const toggleSubStatus = (subStatus: string) => {
    setSelectedSubStatuses(prev => 
      prev.includes(subStatus) 
        ? prev.filter(s => s !== subStatus)
        : [...prev, subStatus]
    );
  };

  const clearSubStatuses = () => {
    setSelectedSubStatuses([]);
  };

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.status-dropdown')) {
        setShowMainStatusDropdown(false);
        setShowSubStatusDropdown(false);
      }
      if (!target.closest('.priority-dropdown')) {
        setShowPriorityDropdown(false);
      }
      if (!target.closest('.assignee-dropdown')) {
        setShowAssigneeDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Format currency for display
  const formatCurrency = (value: number) => {
    if (value >= 1000000) {
      return `$${(value / 1000000).toFixed(1)}M`;
    } else if (value >= 1000) {
      return `$${(value / 1000).toFixed(0)}K`;
    } else {
      return `$${value}`;
    }
  };

  const kanbanContainerRef = useRef<HTMLDivElement>(null);

  // Smooth horizontal scrolling for kanban
  useEffect(() => {
    const container = kanbanContainerRef.current;
    if (!container) return;

    const handleWheel = (e: WheelEvent) => {
      if (e.deltaY !== 0) {
        e.preventDefault();
        container.scrollLeft += e.deltaY;
      }
    };

    container.addEventListener('wheel', handleWheel, { passive: false });
    return () => container.removeEventListener('wheel', handleWheel);
  }, []);

  const handleEditLead = (lead: Lead) => {
    setSelectedLead(lead);
    setShowLeadModal(true);
  };

  const handleDeleteLead = (leadId: string) => {
    setLeads(leads.filter(lead => lead.id !== leadId));
  };

  const handleSaveLead = (lead: Lead) => {
    if (selectedLead) {
      setLeads(leads.map(l => l.id === lead.id ? lead : l));
    } else {
      setLeads([...leads, { ...lead, id: Date.now().toString() }]);
    }
    setShowLeadModal(false);
    setSelectedLead(null);
  };

  const handleStatusChange = (leadId: string, newStatus: string) => {
    setLeads(leads.map(lead => 
      lead.id === leadId ? { ...lead, mainStatus: newStatus } : lead
    ));
  };

  // Add Status Modal Component
  const AddStatusModal = () => (
    <div className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 ${showAddStatusModal ? '' : 'hidden'}`}>
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">Add New Status</h3>
          <button
            onClick={() => {
              setShowAddStatusModal(false);
              setNewStatusForm({ name: '', color: '#3B82F6', order: 1 });
            }}
            className="text-gray-400 hover:text-gray-600"
          >
            <X size={20} />
          </button>
        </div>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Status Name</label>
            <input
              type="text"
              value={newStatusForm.name}
              onChange={(e) => setNewStatusForm({ ...newStatusForm, name: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter status name"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
            <div className="flex items-center gap-3">
              <input
                type="color"
                value={newStatusForm.color}
                onChange={(e) => setNewStatusForm({ ...newStatusForm, color: e.target.value })}
                className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
              />
              <input
                type="text"
                value={newStatusForm.color}
                onChange={(e) => setNewStatusForm({ ...newStatusForm, color: e.target.value })}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Order Position</label>
            <input
              type="number"
              value={newStatusForm.order}
              onChange={(e) => setNewStatusForm({ ...newStatusForm, order: parseInt(e.target.value) || 1 })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              min="1"
            />
            <p className="text-xs text-gray-500 mt-1">Position in the pipeline workflow</p>
          </div>
        </div>
        
        <div className="flex gap-3 mt-6">
              <button
            onClick={() => {
              setShowAddStatusModal(false);
              setNewStatusForm({ name: '', color: '#3B82F6', order: 1 });
            }}
            className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
          >
            Cancel
              </button>
              <button
            onClick={() => {
              if (newStatusForm.name.trim()) {
                const newStatus: StatusConfig = {
                  id: Date.now().toString(),
                  name: newStatusForm.name.trim(),
                  color: newStatusForm.color,
                  order: newStatusForm.order,
                  subStatuses: [],
                  excludedTeams: [],
                  excludedUsers: []
                };
                setStatusConfig([...statusConfig, newStatus]);
                setShowAddStatusModal(false);
                setNewStatusForm({ name: '', color: '#3B82F6', order: 1 });
              }
            }}
            disabled={!newStatusForm.name.trim()}
            className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            Create Status
              </button>
        </div>
      </div>
    </div>
  );

  // Status Settings Modal Component
  const StatusSettingsModal = () => {
    const currentStatus = selectedStatusForSettings;
    const currentSubStatus = selectedSubStatusForSettings;
    
    if (!currentStatus && !currentSubStatus) return null;
    
    const isMainStatus = !!currentStatus && !currentSubStatus;
    const title = isMainStatus ? `${currentStatus.name} Settings` : `${currentSubStatus?.subStatus.name} Settings`;
    
    return (
      <div className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 ${showStatusSettingsModal ? '' : 'hidden'}`}>
        <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
              <button
              onClick={() => {
                setShowStatusSettingsModal(false);
                setSelectedStatusForSettings(null);
                setSelectedSubStatusForSettings(null);
              }}
              className="text-gray-400 hover:text-gray-600"
            >
              <X size={20} />
              </button>
          </div>
          
          <div className="space-y-6">
            {/* Team Exclusions */}
            <div>
              <h4 className="text-sm font-semibold text-gray-900 mb-3">Team Access Control</h4>
              <div className="space-y-2">
                {teams.map(team => {
                  const isExcluded = isMainStatus 
                    ? currentStatus.excludedTeams?.includes(team.id)
                    : currentSubStatus?.subStatus.excludedTeams?.includes(team.id);
                    
                  return (
                    <div key={team.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-4 h-4 rounded-full" style={{ backgroundColor: team.color }}></div>
                        <div>
                          <p className="font-medium text-gray-900">{team.name}</p>
                          <p className="text-sm text-gray-500">{team.members.length} members</p>
                        </div>
                      </div>
              <button
                        onClick={() => {
                          if (isMainStatus) {
                            const updated = { ...currentStatus };
                            if (isExcluded) {
                              updated.excludedTeams = updated.excludedTeams?.filter(id => id !== team.id) || [];
                            } else {
                              updated.excludedTeams = [...(updated.excludedTeams || []), team.id];
                            }
                            setStatusConfig(statusConfig.map(s => s.id === updated.id ? updated : s));
                            setSelectedStatusForSettings(updated);
                          }
                        }}
                        className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                          isExcluded 
                            ? 'bg-red-100 text-red-700 hover:bg-red-200' 
                            : 'bg-green-100 text-green-700 hover:bg-green-200'
                        }`}
                      >
                        {isExcluded ? 'Excluded' : 'Allowed'}
              </button>
                    </div>
                  );
                })}
              </div>
            </div>
            
            {/* User Exclusions */}
            <div>
              <h4 className="text-sm font-semibold text-gray-900 mb-3">Individual User Access</h4>
              <div className="space-y-2">
                {users.map(user => {
                  const isExcluded = isMainStatus 
                    ? currentStatus.excludedUsers?.includes(user.id)
                    : currentSubStatus?.subStatus.excludedUsers?.includes(user.id);
                    
                  return (
                    <div key={user.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-medium">
                          {user.name.split(' ').map(n => n[0]).join('')}
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">{user.name}</p>
                          <p className="text-sm text-gray-500">{user.role} â€¢ {user.teams.join(', ')}</p>
                        </div>
                      </div>
              <button
                        onClick={() => {
                          if (isMainStatus) {
                            const updated = { ...currentStatus };
                            if (isExcluded) {
                              updated.excludedUsers = updated.excludedUsers?.filter(id => id !== user.id) || [];
                            } else {
                              updated.excludedUsers = [...(updated.excludedUsers || []), user.id];
                            }
                            setStatusConfig(statusConfig.map(s => s.id === updated.id ? updated : s));
                            setSelectedStatusForSettings(updated);
                          }
                        }}
                        className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                          isExcluded 
                            ? 'bg-red-100 text-red-700 hover:bg-red-200' 
                            : 'bg-green-100 text-green-700 hover:bg-green-200'
                        }`}
                      >
                        {isExcluded ? 'Excluded' : 'Allowed'}
              </button>
            </div>
                  );
                })}
          </div>
        </div>
      </div>

          <div className="flex justify-end mt-6">
            <button
              onClick={() => {
                setShowStatusSettingsModal(false);
                setSelectedStatusForSettings(null);
                setSelectedSubStatusForSettings(null);
              }}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              Done
            </button>
              </div>
            </div>
      </div>
    );
  };

  return (
    <div className="p-4 h-screen bg-white flex flex-col overflow-hidden">
      {/* Compact Header - Taskboard Style */}
      <div className="bg-white border border-gray-200 rounded-xl p-4 mb-4 shadow-sm">
        <div className="flex flex-col gap-4">
          {/* Header Row: Title + Statistics + Card Mode Toggle + Sub-routes */}
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            {/* Left Section: Title + Statistics */}
            <div className="flex items-center gap-4">
              <h1 className="text-xl font-poppins font-bold text-gray-900">Lead Pipeline</h1>
              
              {/* Statistics Badges */}
              <div className="flex items-center gap-2">
                <div className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-poppins font-medium">
                  {stats.totalLeads} Leads
                </div>
                <div className="bg-green-100 text-green-800 px-2 py-1 rounded-md text-xs font-poppins font-medium">
                  {formatCurrency(stats.totalValue)}
                </div>
                <div className="bg-red-100 text-red-800 px-2 py-1 rounded-md text-xs font-poppins font-medium">
                  {stats.hotLeads} Hot
                </div>
                <div className="bg-purple-100 text-purple-800 px-2 py-1 rounded-md text-xs font-poppins font-medium">
                  {stats.avgProbability}%
                </div>
              </div>
            </div>

            {/* Center Section: Team Selector */}
            <div className="flex items-center justify-center">
              <div className="relative">
                <button
                  onClick={() => setShowTeamDropdown(!showTeamDropdown)}
                  className="flex items-center gap-2 bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 border border-blue-200 px-4 py-2 rounded-xl text-sm font-poppins font-medium text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md"
                >
                  <Users size={16} className="text-blue-600" />
                  <span>{selectedTeam === 'All' ? 'All Teams' : selectedTeam}</span>
                  <span className="bg-blue-100 text-blue-600 px-2 py-0.5 rounded-full text-xs font-medium">
                    {filteredLeads.length}
                  </span>
                  <ChevronDown size={14} className={`text-blue-600 transition-transform duration-200 ${showTeamDropdown ? 'rotate-180' : ''}`} />
                </button>
                
                {showTeamDropdown && (
                  <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-20 min-w-56 overflow-hidden">
                    <div className="p-1">
                      <button
                        onClick={() => {
                          setSelectedTeam('All');
                          setShowTeamDropdown(false);
                        }}
                        className={`w-full px-3 py-2 text-left text-sm hover:bg-gray-50 font-poppins rounded-lg flex items-center justify-between transition-colors ${
                          selectedTeam === 'All' ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
                        }`}
                      >
                        <span>All Teams</span>
                        <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                          selectedTeam === 'All' 
                            ? 'bg-blue-100 text-blue-600' 
                            : 'bg-gray-100 text-gray-500'
                        }`}>
                          {filteredLeads.length}
                        </span>
                      </button>
                      {teams.map(team => (
                        <button
                          key={team.id}
                          onClick={() => {
                            setSelectedTeam(team.name);
                            setShowTeamDropdown(false);
                          }}
                          className={`w-full px-3 py-2 text-left text-sm hover:bg-gray-50 font-poppins rounded-lg flex items-center justify-between transition-colors ${
                            selectedTeam === team.name ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
                          }`}
                        >
                          <div className="flex items-center gap-2">
                            <div
                              className="w-2 h-2 rounded-full"
                              style={{ backgroundColor: team.color }}
                            />
                            <span>{team.name}</span>
                          </div>
                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                            selectedTeam === team.name 
                              ? 'bg-blue-100 text-blue-600' 
                              : 'bg-gray-100 text-gray-500'
                          }`}>
                            {team.members.length}
                          </span>
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Right Section: Card Mode Toggle + Sub-routes */}
            <div className="flex items-center gap-3">
              {/* Card Mode Toggle */}
              <div className="flex items-center bg-gray-100 p-0.5 rounded-lg">
                <button
                  onClick={() => setCardMode('colorful')}
                  className={`p-1.5 rounded-md transition-all duration-300 ${
                    cardMode === 'colorful'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <Palette size={16} />
                </button>
                <button
                  onClick={() => setCardMode('minimal')}
                  className={`p-1.5 rounded-md transition-all duration-300 ${
                    cardMode === 'minimal'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <Minus size={16} />
                </button>
              </div>

              {/* Tab Navigation */}
              <div className="flex items-center gap-1 bg-gray-100 p-0.5 rounded-lg">
                {[
                  { key: 'pipeline', label: 'Pipeline', icon: Target },
                  { key: 'proposals', label: 'Proposals', icon: FileText },
                  { key: 'analytics', label: 'Analytics', icon: BarChart3 },
                  { key: 'settings', label: 'Settings', icon: Settings }
                ].map(({ key, label, icon: Icon }) => (
                  <button
                    key={key}
                    onClick={() => setActiveTab(key as any)}
                    className={`px-3 py-1.5 rounded-md text-sm font-poppins font-medium transition-all duration-200 flex items-center gap-1.5 ${
                      activeTab === key
                        ? 'bg-white text-blue-600 shadow-sm'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <Icon size={14} />
                    {label}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Compact Filter Bar - Taskboard Style */}
        {activeTab === 'pipeline' && (
          <div className="bg-white p-3 rounded-xl border border-gray-200 mb-4 shadow-sm">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
              {/* Left Section: Search and filters */}
              <div className="flex flex-col sm:flex-row gap-2 flex-1">
                {/* Search */}
                <div className="relative flex-1 max-w-xs">
                  <Search size={14} className="absolute left-2.5 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search leads..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full pl-8 pr-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-poppins text-sm"
                  />
                </div>

                {/* Main Status Filter */}
                <div className="relative status-dropdown">
                  <button
                    onClick={() => setShowMainStatusDropdown(!showMainStatusDropdown)}
                    className="px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-poppins text-sm bg-white flex items-center gap-2 min-w-28"
                  >
                    <span className="truncate">
                      {selectedMainStatus === 'All' ? 'All Status' : selectedMainStatus}
                    </span>
                    <ChevronDown size={14} className={`transition-transform duration-200 ${showMainStatusDropdown ? 'rotate-180' : ''}`} />
                  </button>
                  
                  {showMainStatusDropdown && (
                    <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20 min-w-full">
                      {mainStatuses.map(status => (
                        <button
                          key={status}
                          onClick={() => handleMainStatusChange(status)}
                          className={`w-full px-3 py-2 text-left text-sm hover:bg-gray-50 font-poppins first:rounded-t-lg last:rounded-b-lg flex items-center justify-between ${
                            selectedMainStatus === status ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
                          }`}
                        >
                          <span>{status === 'All' ? 'All Status' : status}</span>
                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                            selectedMainStatus === status 
                              ? 'bg-blue-100 text-blue-600' 
                              : 'bg-gray-100 text-gray-500'
                          }`}>
                            {mainStatusCounts[status] || 0}
                          </span>
                        </button>
                      ))}
                    </div>
                  )}
                </div>

                {/* Sub Status Filter */}
                <div className="relative status-dropdown">
                  <button
                    onClick={() => setShowSubStatusDropdown(!showSubStatusDropdown)}
                    className="px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-poppins text-sm bg-white flex items-center gap-2 min-w-32"
                  >
                    <span className="truncate">
                      {selectedSubStatuses.length === 0 
                        ? 'All Sub-Status' 
                        : selectedSubStatuses.length === 1 
                          ? selectedSubStatuses[0]
                          : `${selectedSubStatuses.length} selected`
                      }
                  </span>
                    <ChevronDown size={14} className={`transition-transform duration-200 ${showSubStatusDropdown ? 'rotate-180' : ''}`} />
                </button>
                
                  {showSubStatusDropdown && (
                    <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20 min-w-full max-h-60 overflow-y-auto">
                      {selectedSubStatuses.length > 0 && (
                        <button
                          onClick={clearSubStatuses}
                          className="w-full px-3 py-2 text-left text-sm text-red-600 hover:bg-red-50 font-poppins border-b border-gray-100 flex items-center gap-2"
                        >
                          <X size={12} />
                          Clear All
                        </button>
                      )}
                      {currentSubStatuses.map(subStatus => (
                        <label
                          key={subStatus.id}
                          className="w-full px-3 py-2 text-left text-sm hover:bg-gray-50 font-poppins flex items-center justify-between cursor-pointer"
                        >
                          <div className="flex items-center gap-2">
                            <input
                              type="checkbox"
                              checked={selectedSubStatuses.includes(subStatus.name)}
                              onChange={() => toggleSubStatus(subStatus.name)}
                              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            <span className={selectedSubStatuses.includes(subStatus.name) ? 'text-blue-600' : 'text-gray-700'}>
                              {subStatus.name}
                            </span>
                    </div>
                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                            selectedSubStatuses.includes(subStatus.name)
                              ? 'bg-blue-100 text-blue-600' 
                              : 'bg-gray-100 text-gray-500'
                          }`}>
                            {subStatusCounts[subStatus.name] || 0}
                          </span>
                        </label>
                      ))}
                      {currentSubStatuses.length === 0 && (
                        <div className="px-3 py-2 text-sm text-gray-500 font-poppins">
                          No sub-statuses available
                </div>
                      )}
                </div>
                  )}
              </div>

                {/* Priority Filter */}
                <div className="relative priority-dropdown">
                  <button
                    onClick={() => setShowPriorityDropdown(!showPriorityDropdown)}
                    className="px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-poppins text-sm bg-white flex items-center gap-2 min-w-28"
                  >
                    <span className="truncate">
                      {selectedPriority === 'All' ? 'All Priorities' : selectedPriority}
                    </span>
                    <ChevronDown size={14} className={`transition-transform duration-200 ${showPriorityDropdown ? 'rotate-180' : ''}`} />
                  </button>
                  
                  {showPriorityDropdown && (
                    <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20 min-w-full">
                      {priorities.map(priority => (
                        <button
                          key={priority}
                          onClick={() => {
                            setSelectedPriority(priority);
                            setShowPriorityDropdown(false);
                          }}
                          className={`w-full px-3 py-2 text-left text-sm hover:bg-gray-50 font-poppins first:rounded-t-lg last:rounded-b-lg flex items-center justify-between ${
                            selectedPriority === priority ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
                          }`}
                        >
                          <span>{priority === 'All' ? 'All Priorities' : priority}</span>
                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                            selectedPriority === priority 
                              ? 'bg-blue-100 text-blue-600' 
                              : 'bg-gray-100 text-gray-500'
                          }`}>
                            {priorityCounts[priority] || 0}
                          </span>
                        </button>
            ))}
            </div>
                  )}
            </div>

                {/* Assignee Filter */}
                <div className="relative assignee-dropdown">
                  <button
                    onClick={() => setShowAssigneeDropdown(!showAssigneeDropdown)}
                    className="px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-poppins text-sm bg-white flex items-center gap-2 min-w-32"
                  >
                    <span className="truncate">
                      {selectedAssignee === 'All' ? 'All Assignees' : selectedAssignee}
                    </span>
                    <ChevronDown size={14} className={`transition-transform duration-200 ${showAssigneeDropdown ? 'rotate-180' : ''}`} />
                  </button>
                  
                  {showAssigneeDropdown && (
                    <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20 min-w-full max-h-60 overflow-y-auto">
                      {assignees.map(assignee => (
                        <button
                          key={assignee}
                          onClick={() => {
                            setSelectedAssignee(assignee);
                            setShowAssigneeDropdown(false);
                          }}
                          className={`w-full px-3 py-2 text-left text-sm hover:bg-gray-50 font-poppins first:rounded-t-lg last:rounded-b-lg flex items-center justify-between ${
                            selectedAssignee === assignee ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
                          }`}
                        >
                          <span>{assignee === 'All' ? 'All Assignees' : assignee}</span>
                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                            selectedAssignee === assignee 
                              ? 'bg-blue-100 text-blue-600' 
                              : 'bg-gray-100 text-gray-500'
                          }`}>
                            {assigneeCounts[assignee] || 0}
                          </span>
                        </button>
                      ))}
              </div>
                  )}
            </div>

                {/* Probability Range Filter */}
                <div className="flex items-center gap-2 px-3 py-2 border border-gray-200 rounded-lg bg-white">
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={minProbability}
                    onChange={(e) => {
                      const value = Math.max(0, Math.min(100, parseInt(e.target.value) || 0));
                      setMinProbability(value);
                      if (value > maxProbability) {
                        setMaxProbability(value);
                      }
                    }}
                    className="w-10 text-xs text-center text-gray-700 border-none bg-transparent focus:outline-none focus:ring-0"
                  />
                  <span className="text-xs text-gray-500">%</span>
                  
                  {/* Dual Range Slider Container */}
                  <div className="relative flex-1 h-1.5 bg-gray-200 rounded-lg mx-2">
                    {/* Track Fill */}
                    <div 
                      className="absolute h-full bg-blue-500 rounded-lg"
                      style={{
                        left: `${minProbability}%`,
                        width: `${maxProbability - minProbability}%`
                      }}
                    />
                    
                    {/* Min Range Input */}
                    <input
                      type="range"
                      min="0"
                      max="100"
                      value={minProbability}
                      onChange={(e) => {
                        const value = parseInt(e.target.value);
                        if (value <= maxProbability) {
                          setMinProbability(value);
                        }
                      }}
                      className="absolute w-full h-full opacity-0 cursor-pointer"
                      style={{ zIndex: 1 }}
                    />
                    
                    {/* Max Range Input */}
                    <input
                      type="range"
                      min="0"
                      max="100"
                      value={maxProbability}
                      onChange={(e) => {
                        const value = parseInt(e.target.value);
                        if (value >= minProbability) {
                          setMaxProbability(value);
                        }
                      }}
                      className="absolute w-full h-full opacity-0 cursor-pointer"
                      style={{ zIndex: 2 }}
                    />
                    
                    {/* Min Thumb */}
                    <div 
                      className="absolute w-4 h-4 bg-white border-2 border-blue-500 rounded-full cursor-pointer transform -translate-y-1/2 -translate-x-1/2 shadow-sm hover:shadow-md transition-shadow"
                      style={{
                        left: `${minProbability}%`,
                        top: '50%',
                        zIndex: 3
                      }}
                    />
                    
                    {/* Max Thumb */}
                    <div 
                      className="absolute w-4 h-4 bg-white border-2 border-blue-500 rounded-full cursor-pointer transform -translate-y-1/2 -translate-x-1/2 shadow-sm hover:shadow-md transition-shadow"
                      style={{
                        left: `${maxProbability}%`,
                        top: '50%',
                        zIndex: 3
                      }}
                    />
                  </div>
                  
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={maxProbability}
                    onChange={(e) => {
                      const value = Math.max(0, Math.min(100, parseInt(e.target.value) || 100));
                      setMaxProbability(value);
                      if (value < minProbability) {
                        setMinProbability(value);
                      }
                    }}
                    className="w-10 text-xs text-center text-gray-700 border-none bg-transparent focus:outline-none focus:ring-0"
                  />
                  <span className="text-xs text-gray-500">%</span>
                </div>
              </div>



              {/* Right Section: View Mode Toggle + Add Button */}
              <div className="flex items-center gap-3">
                {/* View Mode Toggle */}
                <div className="flex items-center gap-1 bg-gray-100 rounded-lg p-1">
                  <button
                    onClick={() => setViewMode('kanban')}
                    className={`p-2 rounded-md transition-colors duration-200 ${
                      viewMode === 'kanban' 
                        ? 'bg-white text-blue-600 shadow-sm' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="Kanban View"
                  >
                    <LayoutGrid size={16} />
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 rounded-md transition-colors duration-200 ${
                      viewMode === 'list' 
                        ? 'bg-white text-blue-600 shadow-sm' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="List View"
                  >
                    <List size={16} />
                  </button>
                  <button
                    onClick={() => setViewMode('calendar')}
                    className={`p-2 rounded-md transition-colors duration-200 ${
                      viewMode === 'calendar' 
                        ? 'bg-white text-blue-600 shadow-sm' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="Calendar View"
                  >
                    <Calendar size={16} />
                  </button>
              </div>

              <button 
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2.5 rounded-lg font-poppins font-medium transition-colors duration-200 flex items-center gap-2"
                  onClick={() => {
                    setSelectedLead(null);
                    setShowLeadModal(true);
                  }}
              >
                <Plus size={16} />
                  New Lead
              </button>
            </div>
          </div>
        )}

      {/* Content Based on Active Tab */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'pipeline' && (
          <>
            {/* Kanban View */}
            {viewMode === 'kanban' && (
              <div className="h-full flex gap-6 overflow-x-auto pb-4 scrollbar-thin">
                {statuses.map(status => (
                  <div key={status} className="flex-shrink-0" style={{ width: '320px' }}>
                    <div className="bg-white rounded-xl border border-gray-200 p-4 shadow-sm flex flex-col hover:shadow-md transition-shadow duration-200 h-full">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="font-poppins font-semibold text-gray-900 text-sm">{status}</h3>
                        <span className="bg-gray-100 text-gray-700 px-2 py-1 rounded-full text-xs font-poppins">
                          {leadsByStatus[status]?.length || 0}
                        </span>
                      </div>

                      <button 
                        className="w-full p-3 border-2 border-dashed border-gray-300 rounded-xl text-gray-500 hover:border-blue-400 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 flex items-center justify-center gap-2 font-poppins text-sm mb-4 flex-shrink-0"
                        onClick={() => {
                          setSelectedLead(null);
                          setShowLeadModal(true);
                        }}
                      >
                        <Plus size={16} />
                        Add Lead
                      </button>
                      
                      <div className="space-y-3 flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
                        {leadsByStatus[status]?.map(lead => (
                          <LeadCard
                            key={lead.id}
                            lead={lead}
                            onEdit={handleEditLead}
                            onDelete={handleDeleteLead}
                            onStatusChange={handleStatusChange}
                            compact={true}
                            cardMode={cardMode}
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          )}

            {/* List View */}
            {viewMode === 'list' && (
              <div className="h-full overflow-hidden">
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm h-full flex flex-col">
                  <div className="flex-1 overflow-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b border-gray-200">
                    <tr>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Lead</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Value</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Status</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Follow Up</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                          <th className="px-6 py-3 text-left text-xs font-poppins font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {filteredLeads.map(lead => (
                          <tr key={lead.id} className="hover:bg-gray-50 transition-colors duration-150">
                            <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                                <div className="text-sm font-poppins font-medium text-gray-900">{lead.title}</div>
                                <div className="text-sm text-gray-500">{lead.company}</div>
                          </div>
                        </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900 font-poppins">{lead.contactPerson}</div>
                              <div className="text-sm text-gray-500">{lead.email}</div>
                        </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-poppins font-semibold text-gray-900">
                                {formatCurrency(lead.value)}
                          </div>
                              <div className="text-sm text-gray-500">{lead.probability}% prob</div>
                        </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className="inline-flex px-2 py-1 text-xs font-poppins font-medium rounded-full bg-blue-100 text-blue-800">
                                {lead.mainStatus}
                          </span>
                        </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex px-2 py-1 text-xs font-poppins font-medium rounded-full ${
                                lead.priority === 'Hot' ? 'bg-red-100 text-red-800' :
                                lead.priority === 'Warm' ? 'bg-orange-100 text-orange-800' :
                                'bg-blue-100 text-blue-800'
                              }`}>
                                {lead.priority}
                          </span>
                        </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900 font-poppins">
                                {lead.followUpDate ? new Date(lead.followUpDate).toLocaleDateString() : 'Not set'}
                              </div>
                        </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="flex items-center">
                                <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                                  <span className="text-xs font-poppins text-gray-600">
                                    {lead.assignee?.charAt(0) || 'U'}
                                  </span>
                                </div>
                                <div className="ml-2">
                                  <div className="text-sm font-poppins text-gray-900">{lead.assignee}</div>
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center gap-2">
                            <button
                                  onClick={() => handleEditLead(lead)}
                                  className="p-1 text-blue-600 hover:bg-blue-50 rounded-full"
                            >
                              <Edit3 size={14} />
                            </button>
                            <button
                                  onClick={() => handleDeleteLead(lead.id)}
                                  className="p-1 text-red-600 hover:bg-red-50 rounded-full"
                            >
                              <Trash2 size={14} />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                  </div>
              </div>
            </div>
          )}

            {/* Calendar View */}
            {viewMode === 'calendar' && (
              <CalendarView leads={filteredLeads} onEditLead={handleEditLead} />
            )}
          </>
        )}

        {/* Other Tab Contents */}
        {activeTab === 'proposals' && (
          <ProposalsPage />
        )}

        {activeTab === 'analytics' && (
          <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-sm">
            <h2 className="text-lg font-poppins font-semibold text-gray-900 mb-4">Analytics Dashboard</h2>
            <p className="text-gray-600 font-poppins">Analytics features coming soon...</p>
          </div>
        )}
      </div>

      {/* Enhanced Settings with Sub-Navigation */}
      {activeTab === 'settings' && (
        <div className="space-y-4">
          {/* Settings Header with Sub-Navigation */}
          <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
              <div className="flex bg-gray-100 rounded-lg p-1">
                  <button
                  onClick={() => setSettingsView('teams')}
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${
                    settingsView === 'teams' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <Users size={16} />
                  Teams
                  </button>
                  <button
                  onClick={() => setSettingsView('statuses')}
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${
                    settingsView === 'statuses' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <Settings2 size={16} />
                  Statuses
                </button>
                <button 
                  onClick={() => setSettingsView('users')}
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${
                    settingsView === 'users' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <UserCheck size={16} />
                  Users
                  </button>
              </div>
                </div>
                <button
              onClick={() => {
                if (settingsView === 'statuses') {
                  setShowAddStatusModal(true);
                }
              }}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center gap-2"
            >
              <Plus size={16} />
              {settingsView === 'teams' ? 'New Team' : settingsView === 'statuses' ? 'New Status' : 'New User'}
                </button>
              </div>

          {/* Dynamic Content Based on Settings View */}
          {settingsView === 'teams' && (
            <div className="space-y-6">
              {/* Teams Statistics */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Total Teams</p>
                      <p className="text-2xl font-bold text-gray-900">{teams.length}</p>
                      <p className="text-sm text-gray-500">Active teams</p>
                    </div>
                    <div className="p-3 bg-blue-100 rounded-lg">
                      <Users className="h-6 w-6 text-blue-600" />
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Total Members</p>
                      <p className="text-2xl font-bold text-green-600">{teams.reduce((sum, team) => sum + team.members.length, 0)}</p>
                      <p className="text-sm text-gray-500">Across all teams</p>
                    </div>
                    <div className="p-3 bg-green-100 rounded-lg">
                      <UserPlus className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Team Leads</p>
                      <p className="text-2xl font-bold text-purple-600">{teams.reduce((sum, team) => sum + team.members.filter(m => m.role === 'Lead').length, 0)}</p>
                      <p className="text-sm text-gray-500">Leadership roles</p>
                    </div>
                    <div className="p-3 bg-purple-100 rounded-lg">
                      <Crown className="h-6 w-6 text-purple-600" />
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Avg Team Size</p>
                      <p className="text-2xl font-bold text-orange-600">{Math.round(teams.reduce((sum, team) => sum + team.members.length, 0) / teams.length)}</p>
                      <p className="text-sm text-gray-500">Members per team</p>
                    </div>
                    <div className="p-3 bg-orange-100 rounded-lg">
                      <BarChart3 className="h-6 w-6 text-orange-600" />
                    </div>
                  </div>
                </div>
              </div>

              {/* Teams Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {teams.map(team => (
                  <div key={team.id} className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div 
                          className="w-4 h-4 rounded-full"
                          style={{ backgroundColor: team.color }}
                        />
                        <div>
                          <h3 className="font-semibold text-gray-900">{team.name}</h3>
                          <p className="text-sm text-gray-500">{team.description}</p>
                        </div>
                      </div>
                      <button className="p-1 text-gray-400 hover:text-gray-600">
                        <MoreHorizontal size={16} />
                      </button>
                    </div>

                    <div className="space-y-3 mb-4">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Members</span>
                        <span className="font-medium">{team.members.length}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Created</span>
                        <span className="font-medium">{new Date(team.createdDate).toLocaleDateString()}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Status</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          team.status === 'Active' ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'
                        }`}>
                          {team.status}
                        </span>
                      </div>
                    </div>

                    <div className="space-y-2 mb-4">
                      <h4 className="text-sm font-medium text-gray-900">Team Members</h4>
                      <div className="space-y-1">
                        {team.members.slice(0, 3).map(member => (
                          <div key={member.id} className="flex items-center gap-2 text-sm">
                            <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs">
                              {member.name.split(' ').map(n => n[0]).join('')}
                            </div>
                            <span className="text-gray-900">{member.name}</span>
                            <span className={`ml-auto px-2 py-0.5 rounded text-xs ${
                              member.role === 'Lead' ? 'bg-purple-100 text-purple-700' :
                              member.role === 'Manager' ? 'bg-blue-100 text-blue-700' :
                              'bg-gray-100 text-gray-700'
                            }`}>
                              {member.role}
                            </span>
                  </div>
                ))}
                        {team.members.length > 3 && (
                          <p className="text-xs text-gray-500">+{team.members.length - 3} more members</p>
                        )}
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <button className="flex-1 px-3 py-2 text-sm text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
                        View Details
                      </button>
                      <button className="px-3 py-2 text-sm text-gray-600 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                        <Edit3 size={14} />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {settingsView === 'statuses' && (
            <div className="space-y-4">
              {/* Compact Overview Cards */}
              <div className="grid grid-cols-4 gap-3">
                <div className="bg-white rounded-lg border border-gray-200 p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                      <Settings2 className="h-4 w-4 text-blue-600" />
                    </div>
                    <div>
                      <p className="text-lg font-semibold text-gray-900">{statusConfig.length}</p>
                      <p className="text-xs text-gray-500">Main Stages</p>
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <BarChart3 className="h-4 w-4 text-green-600" />
                    </div>
                    <div>
                      <p className="text-lg font-semibold text-gray-900">{statusConfig.reduce((sum, status) => sum + status.subStatuses.length, 0)}</p>
                      <p className="text-xs text-gray-500">Sub-Stages</p>
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                      <TrendingUp className="h-4 w-4 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-lg font-semibold text-gray-900">{leads.filter(l => l.mainStatus !== 'Closed').length}</p>
                      <p className="text-xs text-gray-500">Active Leads</p>
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">
                      <Users className="h-4 w-4 text-orange-600" />
                    </div>
                    <div>
                      <p className="text-lg font-semibold text-gray-900">{teams.length}</p>
                      <p className="text-xs text-gray-500">Active Teams</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Modern Status Management */}
              <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
                <div className="px-4 py-3 border-b border-gray-200 bg-gray-50">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-semibold text-gray-900">Pipeline Configuration</h3>
                      <p className="text-xs text-gray-600">Manage your sales workflow stages</p>
                    </div>
                    <button
                      onClick={() => {
                        const newStatus: StatusConfig = {
                          id: Date.now().toString(),
                          name: 'New Stage',
                          color: '#6B7280',
                          order: statusConfig.length + 1,
                          subStatuses: [],
                          excludedTeams: [],
                          excludedUsers: []
                        };
                        setStatusConfig([...statusConfig, newStatus]);
                      }}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-md text-xs font-medium flex items-center gap-1.5 transition-colors"
                    >
                      <Plus size={12} />
                      Add Status
                    </button>
                  </div>
                </div>

                <div className="p-4">
                  {statusConfig.length === 0 ? (
                    <div className="text-center py-8">
                      <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-3">
                        <Settings2 size={20} className="text-gray-400" />
                      </div>
                      <h3 className="text-sm font-medium text-gray-900">No Pipeline Stages</h3>
                      <p className="text-xs text-gray-500 mt-1">Create your first status to get started</p>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      {statusConfig.map((status, statusIndex) => (
                        <div key={status.id} className="border border-gray-200 rounded-lg overflow-hidden">
                          {/* Compact Main Status Row */}
                          <div className="bg-gray-50 px-3 py-2.5">
                            <div className="flex items-center gap-3">
                              {/* Order Number */}
                              <div className="flex items-center gap-1">
                                <input
                                  type="number"
                                  value={status.order}
                                  onChange={(e) => setStatusConfig(statusConfig.map(s => 
                                    s.id === status.id ? { ...s, order: parseInt(e.target.value) || 1 } : s
                                  ))}
                                  className="w-12 h-6 text-xs text-center border border-gray-300 rounded px-1 bg-white"
                                  min="1"
                                />
                                <div className="flex flex-col gap-0.5">
                                  <button
                                    onClick={() => {
                                      const newOrder = Math.max(1, status.order - 1);
                                      setStatusConfig(statusConfig.map(s => 
                                        s.id === status.id ? { ...s, order: newOrder } : s
                                      ));
                                    }}
                                    className="p-0.5 text-gray-400 hover:text-gray-600 transition-colors"
                                  >
                                    <ArrowUp size={10} />
                                  </button>
                                  <button
                                    onClick={() => {
                                      const newOrder = status.order + 1;
                                      setStatusConfig(statusConfig.map(s => 
                                        s.id === status.id ? { ...s, order: newOrder } : s
                                      ));
                                    }}
                                    className="p-0.5 text-gray-400 hover:text-gray-600 transition-colors"
                                  >
                                    <ArrowDown size={10} />
                                  </button>
                                </div>
                        </div>
                        
                              {/* Color Picker */}
                              <input
                                type="color"
                                value={status.color}
                                onChange={(e) => setStatusConfig(statusConfig.map(s => 
                                  s.id === status.id ? { ...s, color: e.target.value } : s
                                ))}
                                className="w-6 h-6 border border-gray-300 rounded cursor-pointer"
                              />

                              {/* Status Name */}
                              <input
                                type="text"
                                value={status.name}
                                onChange={(e) => setStatusConfig(statusConfig.map(s => 
                                  s.id === status.id ? { ...s, name: e.target.value } : s
                                ))}
                                className="flex-1 text-sm font-medium text-gray-900 bg-transparent border-none outline-none"
                                placeholder="Main Status Name"
                              />

                              {/* Lead Count */}
                              <span className="text-xs text-gray-500 bg-gray-200 px-2 py-1 rounded">
                                {leads.filter(l => l.mainStatus === status.name).length} leads
                              </span>

                              {/* Actions */}
                              <div className="flex items-center gap-1">
                                <button
                                  onClick={() => {
                                    const newSubStatus: SubStatus = {
                                      id: `${status.id}-${Date.now()}`,
                                      name: 'New Sub-Status',
                                      color: status.color,
                                      order: status.subStatuses.length + 1,
                                      excludedTeams: [],
                                      excludedUsers: []
                                    };
                                    setStatusConfig(statusConfig.map(s => 
                                      s.id === status.id ? {
                                        ...s,
                                        subStatuses: [...s.subStatuses, newSubStatus]
                                      } : s
                                    ));
                                  }}
                                  className="p-1 text-blue-600 hover:bg-blue-50 rounded text-xs transition-colors"
                                  title="Add Sub-Status"
                                >
                                  <Plus size={12} />
                                </button>
                                <button
                                  onClick={() => {
                                    setSelectedStatusForSettings(status);
                                    setShowStatusSettingsModal(true);
                                  }}
                                  className="p-1 text-gray-600 hover:bg-gray-100 rounded text-xs transition-colors"
                                  title="Exclude Teams/Users"
                                >
                                  <Eye size={12} />
                                </button>
                                <button
                                  onClick={() => setStatusConfig(statusConfig.filter(s => s.id !== status.id))}
                                  className="p-1 text-red-600 hover:bg-red-50 rounded text-xs transition-colors"
                                  title="Delete Status"
                                >
                                  <Trash2 size={12} />
                                </button>
                              </div>
                            </div>
                          </div>

                          {/* Compact Sub-Statuses */}
                          {status.subStatuses.length > 0 && (
                            <div className="px-3 py-2 space-y-1">
                              {status.subStatuses.map((subStatus, subIndex) => (
                                <div key={subStatus.id} className="flex items-center gap-3 py-1.5 px-2 bg-white rounded border border-gray-100">
                                  {/* Sub-Status Order */}
                                  <div className="flex items-center gap-1">
                                    <input
                                      type="number"
                                      value={subStatus.order}
                                      onChange={(e) => setStatusConfig(statusConfig.map(s => 
                                        s.id === status.id ? {
                                          ...s,
                                          subStatuses: s.subStatuses.map(sub =>
                                            sub.id === subStatus.id ? { ...sub, order: parseInt(e.target.value) || 1 } : sub
                                          )
                                        } : s
                                      ))}
                                      className="w-10 h-5 text-xs text-center border border-gray-300 rounded px-1"
                                      min="1"
                                    />
                                    <div className="flex flex-col gap-0.5">
                                      <button
                                        onClick={() => {
                                          const newOrder = Math.max(1, subStatus.order - 1);
                                          setStatusConfig(statusConfig.map(s => 
                                            s.id === status.id ? {
                                              ...s,
                                              subStatuses: s.subStatuses.map(sub =>
                                                sub.id === subStatus.id ? { ...sub, order: newOrder } : sub
                                              )
                                            } : s
                                          ));
                                        }}
                                        className="p-0.5 text-gray-400 hover:text-gray-600 transition-colors"
                                      >
                                        <ArrowUp size={8} />
                                      </button>
                                      <button
                                        onClick={() => {
                                          const newOrder = subStatus.order + 1;
                                          setStatusConfig(statusConfig.map(s => 
                                            s.id === status.id ? {
                                              ...s,
                                              subStatuses: s.subStatuses.map(sub =>
                                                sub.id === subStatus.id ? { ...sub, order: newOrder } : sub
                                              )
                                            } : s
                                          ));
                                        }}
                                        className="p-0.5 text-gray-400 hover:text-gray-600 transition-colors"
                                      >
                                        <ArrowDown size={8} />
                                      </button>
                            </div>
                        </div>

                                  {/* Sub-Status Color */}
                                  <input
                                    type="color"
                                    value={subStatus.color}
                                    onChange={(e) => setStatusConfig(statusConfig.map(s => 
                                      s.id === status.id ? {
                                        ...s,
                                        subStatuses: s.subStatuses.map(sub =>
                                          sub.id === subStatus.id ? { ...sub, color: e.target.value } : sub
                                        )
                                      } : s
                                    ))}
                                    className="w-5 h-5 border border-gray-300 rounded cursor-pointer"
                                  />

                                  {/* Sub-Status Name */}
                                  <input
                                    type="text"
                                    value={subStatus.name}
                                    onChange={(e) => setStatusConfig(statusConfig.map(s => 
                                      s.id === status.id ? {
                                        ...s,
                                        subStatuses: s.subStatuses.map(sub =>
                                          sub.id === subStatus.id ? { ...sub, name: e.target.value } : sub
                                        )
                                      } : s
                                    ))}
                                    className="flex-1 text-xs text-gray-900 bg-transparent border-none outline-none"
                                    placeholder="Sub-status name"
                                  />

                                  {/* Lead Count */}
                                  <span className="text-xs text-gray-500 bg-gray-100 px-1.5 py-0.5 rounded">
                                    {leads.filter(l => l.subStatus === subStatus.name).length}
                                  </span>

                                  {/* Sub-Status Actions */}
                                  <div className="flex items-center gap-1">
                                    <button
                                      onClick={() => {
                                        setSelectedSubStatusForSettings({ statusId: status.id, subStatus });
                                        setShowStatusSettingsModal(true);
                                      }}
                                      className="p-1 text-gray-600 hover:bg-gray-100 rounded text-xs transition-colors"
                                      title="Exclude Teams/Users"
                                    >
                                      <Eye size={10} />
                                    </button>
                                    <button
                                      onClick={() => setStatusConfig(statusConfig.map(s => 
                                        s.id === status.id ? {
                                          ...s,
                                          subStatuses: s.subStatuses.filter(sub => sub.id !== subStatus.id)
                                        } : s
                                      ))}
                                      className="p-1 text-red-500 hover:bg-red-50 rounded text-xs transition-colors"
                                      title="Delete Sub-Status"
                                    >
                                      <X size={10} />
                                    </button>
                      </div>
              </div>
                              ))}
            </div>
          )}
                        </div>
                      ))}
        </div>
      )}
                </div>

                {/* Compact Save Indicator */}
                <div className="bg-gray-50 px-4 py-2 border-t border-gray-200">
                  <div className="flex items-center justify-between">
                    <p className="text-xs text-gray-600">Auto-saving changes</p>
                    <div className="flex items-center gap-1.5">
                      <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                      <span className="text-xs text-green-600 font-medium">Saved</span>
                    </div>
                  </div>
                </div>
              </div>
        </div>
      )}

          {settingsView === 'users' && (
            <div className="space-y-6">
              {/* Users Statistics */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Total Users</p>
                      <p className="text-2xl font-bold text-gray-900">{users.length}</p>
                      <p className="text-sm text-gray-500">Active users</p>
                    </div>
                    <div className="p-3 bg-blue-100 rounded-lg">
                      <UserCheck className="h-6 w-6 text-blue-600" />
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Managers</p>
                      <p className="text-2xl font-bold text-green-600">{users.filter(u => u.role === 'Manager').length}</p>
                      <p className="text-sm text-gray-500">Team leaders</p>
                    </div>
                    <div className="p-3 bg-green-100 rounded-lg">
                      <Crown className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Agents</p>
                      <p className="text-2xl font-bold text-purple-600">{users.filter(u => u.role === 'Agent').length}</p>
                      <p className="text-sm text-gray-500">Sales agents</p>
                    </div>
                    <div className="p-3 bg-purple-100 rounded-lg">
                      <Users className="h-6 w-6 text-purple-600" />
                    </div>
                  </div>
                </div>
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Permissions</p>
                      <p className="text-2xl font-bold text-orange-600">4</p>
                      <p className="text-sm text-gray-500">Permission types</p>
                    </div>
                    <div className="p-3 bg-orange-100 rounded-lg">
                      <Shield className="h-6 w-6 text-orange-600" />
                    </div>
                  </div>
                </div>
              </div>

              {/* Users Table */}
              <div className="bg-white rounded-xl border border-gray-200">
                <div className="p-6 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-gray-900">Sales Users</h3>
                    <div className="flex items-center gap-3">
                      <div className="relative">
                        <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                        <input
                          type="text"
                          placeholder="Search users..."
                          className="pl-9 pr-3 py-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <select className="px-3 py-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option>All Roles</option>
                        <option>Admin</option>
                        <option>Manager</option>
                        <option>Agent</option>
                        <option>Viewer</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Teams</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Permissions</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Active</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {users.map(user => (
                        <tr key={user.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center gap-3">
                              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                                {user.name.split(' ').map(n => n[0]).join('')}
                              </div>
                              <div>
                                <div className="font-medium text-gray-900">{user.name}</div>
                                <div className="text-sm text-gray-500">{user.email}</div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                              user.role === 'Admin' ? 'bg-red-100 text-red-800' :
                              user.role === 'Manager' ? 'bg-green-100 text-green-800' :
                              user.role === 'Agent' ? 'bg-blue-100 text-blue-800' :
                              'bg-gray-100 text-gray-800'
                            }`}>
                              {user.role}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex gap-1">
                              {user.teams.map(teamId => {
                                const team = teams.find(t => t.id === teamId);
                                return team ? (
                                  <span key={teamId} className="inline-flex px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded">
                                    {team.name}
                                  </span>
                                ) : null;
                              })}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-gray-900">
                              {user.permissions.filter(p => p.granted).length}/{user.permissions.length}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {new Date(user.lastActive).toLocaleDateString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                              user.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                              {user.status}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center gap-2">
                              <button className="p-1 text-blue-600 hover:bg-blue-100 rounded transition-colors">
                                <Key size={14} />
                              </button>
                              <button className="p-1 text-gray-600 hover:bg-gray-100 rounded transition-colors">
                                <Edit3 size={14} />
                              </button>
                              <button className="p-1 text-red-600 hover:bg-red-100 rounded transition-colors">
                                <Trash2 size={14} />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Modals */}
      <LeadModal
        isOpen={showLeadModal}
        lead={selectedLead}
        onClose={() => {
          setShowLeadModal(false);
          setSelectedLead(null);
        }}
        onSave={handleSaveLead}
        onDelete={handleDeleteLead}
        teams={teams}
        statusConfig={statusConfig}
        users={users}
      />

      {/* Status Management Modal removed - now using inline editor */}
      
      <AddStatusModal />
      <StatusSettingsModal />
    </div>
  );
};

export default LeadPipelinePage; 